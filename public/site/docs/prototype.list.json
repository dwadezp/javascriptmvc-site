c({"name": "prototype.list", "type": "function", "parents": ["prototype"], "comment": "<p><code>can.EJS.Helpers.list</code> iterates over an observable list and\nsets up live binding. <code>list</code> takes a list of observables and a callback \nfunction with the signature <code>callback( currentItem, index, itemList )</code></p>\n\n<p>Typically, this will look like:</p>\n\n<pre><code>&lt;% list(items, function(item){ %&gt;\n     &lt;li&gt;&lt;%= item.attr('name') %&gt;&lt;/li&gt;\n&lt;% }) %&gt;\n</code></pre>\n\n<p>Whenever the list of observables changes, such as when an item is added or removed, \nthe EJS view will redraw the list in the DOM.</p>", "hide": true, "src": {"query": "", "fragment": "", "path": "can/view/ejs/ejs.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 124, "children": []})