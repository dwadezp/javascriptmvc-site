c({"name": "can.view.mustache", "type": "function", "parents": ["can.view"], "comment": "<p><code>can.view.mustache(id, template)</code> registers an EJS template string for a given id programatically.</p>\n\n<pre><code> can.view.mustache('myViewMustache', '&lt;h2&gt;{{message}}&lt;/h2&gt;');\n var text = can.view.render('myViewMustache', {\n     message : 'Hello there!'\n });\n text // -&gt; &lt;h2&gt;Hello there!&lt;/h2&gt;\n</code></pre>\n\n<p>You can also retrieve nameless mustache renderers:</p>\n\n<pre><code> var renderer = can.view.mustache('&lt;div&gt;{{message}}&lt;/div&gt;');\n renderer({\n     message : 'Mustache'\n }); // -&gt; &lt;div&gt;Mustache&lt;/div&gt;\n</code></pre>", "params": {"id": {"order": 0, "description": "<p>The template id or templates string to get a nameless renderer function</p>", "name": "id", "type": "String", "optional": false}, "template": {"order": 1, "description": "<p>The Mustache template string when registered with an id</p>", "name": "template", "type": "String", "optional": true}}, "src": {"query": "", "fragment": "", "path": "can/view/view.js", "dir": {"prototype": {}}, "filename": {"prototype": {}}, "ext": {"prototype": {}}, "domain": {"prototype": {}}, "isCrossDomain": {"prototype": {}}, "isRelativeToDomain": {"prototype": {}}, "hash": {"prototype": {}}, "search": {"prototype": {}}, "add": {"prototype": {}}, "join": {"prototype": {}}, "normalize": {"prototype": {}}, "isRelative": {"prototype": {}}, "pathTo": {"prototype": {}}, "mapJoin": {"prototype": {}}, "addJS": {"prototype": {}}, "toString": {"prototype": {}}, "insertMapping": {"prototype": {}}}, "line": 105, "children": []})