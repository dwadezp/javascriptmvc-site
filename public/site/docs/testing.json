c({"name": "testing", "type": "page", "comment": "<p>DoneJS puts a tremendous emphasis on \ntesting. It uses [FuncUnit] to provide easy to write functional and\nunit tests that can be run in the browser or automated!</p>\n\n<p>When you scaffolded recipe, it created tests for you.  This guide will show you how to:</p>\n\n<ul>\n<li>Run unit tests.</li>\n<li>Understand the unit tests.</li>\n<li>Run functional tests.</li>\n<li>Understand the functional tests.</li>\n<li>Test isTasty functionality.</li>\n</ul>\n\n<h2>Run Unit Tests</h2>\n\n<p>FuncUnit uses QUnit unit test things like models and basic plugins.  You can run these\ntests in the browser or Envjs (and now PhantomJS with a little extra work).</p>\n\n<h3>Run Unit Tests in the Browser</h3>\n\n<p>Open <code>cookbook/qunit.html</code>.  You should see something like:</p>\n\n<p><img class='image_tag' src='jmvc/images/test_cookbook_example.png' /></p>\n\n<p>We'll see how this works in a second.  First, lets run the unit tests\nin Envjs.</p>\n\n<h3>Run Unit Tests in Envjs</h3>\n\n<p>Envjs is a JavaScript-based browser for Rhino.  FuncUnit\ncan run your tests in this simulated environment.  </p>\n\n<p>In a command window type:</p>\n\n<pre><code class='javascript'>> js funcunit/run envjs cookbook/qunit.html</code></pre>\n\n<p>This runs qunit.html in a simulated \nbrowser environment.  The output should look like:</p>\n\n<p><img src='http://wiki.javascriptmvc.com/wiki/images/2/24/Qunit-envjs.png' width='500px'></p>\n\n<h2>Understanding the Unit Tests</h2>\n\n<p>FuncUnit uses [http://docs.jquery.com/QUnit QUnit] for assertions and\norganizing them into tests and modules.  The best place to start understanding the\nunit tests is to read through [http://docs.jquery.com/QUnit QUnit's documentation].</p>\n\n<p><strong>cookbook/qunit.html</strong> loads [steal] and tells it to load\n<code>cookbook/test/qunit/qunit.js</code> which loads your unit tests:</p>\n\n<ul>\n<li><code>cookbook/test/qunit/cookbook_test.js</code></li>\n<li><code>cookbook/test/qunit/recipe_test.js</code></li>\n</ul>\n\n<p>These files steal <code>funcunit/qunit</code> then \ndeclare tests that get run once \nall scripts have loaded.</p>\n\n<p>Open <strong>cookbook/test/qunit/recipe_test.js</strong>, \nand lets see how the <strong>findAll</strong> test works:</p>\n\n<pre><code>//creates a test\ntest(\"findAll\", function(){\n  //prevents the next test from running\n  stop(2000);\n\n  //requests recipes\n  Cookbook.Models.Recipe.findAll({}, function(recipes){\n\n    //makes sure we have something\n    ok(recipes)\n\n    //makes sure we have at least 1 recipe\n    ok(recipes.length)\n\n    //makes sure a recipe looks right\n    ok(recipes[0].name)\n    ok(recipes[0].description)\n\n    //allows the next test to start\n    start()\n  });\n})\n</code></pre>\n\n<h2>Run Functional Tests</h2>\n\n<p>Functional tests are used to test things \nthat require user interaction like widgets that listen for \nclicks and key events.</p>\n\n<p>Cookbook's functional tests test the recipe create and recipe lists widgets.</p>\n\n<h3>Run Functional Tests in the Browser</h3>\n\n<p>Open <code>cookbook/funcunit.html</code>.  You should see something like:</p>\n\n<p><img src='http://wiki.javascriptmvc.com/wiki/images/b/b6/Funcunit.png'/></p>\n\n<h3>Run Functional Tests in Selenium</h3>\n\n<p>[http://seleniumhq.org/ Selenium] can automate launching browsers and is packaged\nwith FuncUnit.</p>\n\n<p>In a command window type:</p>\n\n<pre><code class='javascript'>> js funcunit\\run selenium cookbook\\funcunit.html</code></pre>\n\n<p>This should open Firefox and IE if you are using Windows.  The results of the\ntest should look like:</p>\n\n<p><img src='http://wiki.javascriptmvc.com/wiki/images/a/a7/Funcunit-envjs.png' width='500px'></p>\n\n<div class='whisper'>\n    If Selenium is unable to open your browsers, it's likely you have them in an\n    unusual location.  Read [FuncUnit.static.browsers] for information on how to configure browsers\n    so selenium can find them.\n</div>\n\n<p>If you are having trouble running the tests in Internet Explorer, you need to change a \nfew settings in the browser.  Please see the [FuncUnit FuncUnit documentation] for troubleshooting help.</p>\n\n<h2>Understanding FuncUnit Tests</h2>\n\n<p>FuncUnit adds to QUnit the ability to open another page, in this case\n<code>cookbook/cookbook.html</code>, perform actions on it, and\nget information from it.</p>\n\n<p>The <code>cookbook/funcunit.html</code>  page\nworks just like <code>qunit.html</code> except the 'funcunit' plugin is loaded which \nprovides [FuncUnit].  FuncUnit is aliased to \"<b>S</b>\" to highlight the similarity between its API\nand jQuery's API.</p>\n\n<p>Let take a quick look at a FuncUnit test:</p>\n\n<pre><code class='javascript'>test(\"create recipes\", function(){\n\n  //type Ice in the name field\n  S(\"[name=name]\").type(\"Ice\")\n\n  //type Cold Water in the description field\n  S(\"[name=description]\").type(\"Cold Water\")\n\n  //click the submit button\n  S(\"[type=submit]\").click()\n\n  //wait until the 2nd recipe exists\n  S('.recipe:nth-child(2)').exists()\n\n  //Gets the text of the first td\n  S('.recipe:nth-child(2) td:first').text(function(text){\n\n    //checks taht it has ice\n    ok(text.match(/Ice/), \"Typed Ice\");\n  });\n\n})</code></pre>\n\n<p>Functional tests are largely many asynchronous actions \n(clicks and keypresses)\nwith relatively few checks/assertions. <br />\nFuncUnit's goal is to provide as readable and linear syntax as possible.\nFuncUnit statements are actually stored and then run asynchronously.  This requires that\ngetting a value from the page happens in a callback function.</p>\n\n<p>For more information on FuncUnit, read its [FuncUnit documentation]</p>", "title": "Testing Cookbook", "parents": ["getstarted"], "order": 1, "src": "tutorials/getstarted/testing.md", "children": []})