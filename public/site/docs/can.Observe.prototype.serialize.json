c({"name": "can.Observe.prototype.serialize", "params": {}, "ret": {"description": "<p>a JavaScript Object that can be \nserialized with <code>JSON.stringify</code> or other methods. </p>", "type": "Object"}, "type": "function", "comment": "<p><code>can.Observe.prototype.serialize</code> serializes an object for the object. \nSerialized data is typically used to send back to a server.</p>\n\n<p>You can set the serialization methods similar to the convert methods:</p>\n\n<pre><code>var Contact = can.Observe({\n    attributes : { \n        birthday : 'date'\n    },\n    serialize : {\n        date : function( val, type ){\n            return val.getYear() + \n                \"-\" + (val.getMonth() + 1) + \n                \"-\" + val.getDate(); \n        }\n    }\n},{})\n\nvar contact = new Contact();\ncontact.attr('birthday', new Date());\ncontact.serialize()\n//-&gt; { birthday: 'YYYY-MM-DD' }\n</code></pre>\n\n<p>You can also get and serialize an individual property by passing the attribute\nname to the <code>serialize</code> function.  Building on the above demo, we can serialize\nthe <code>birthday</code> attribute only.</p>\n\n<p><pre><code>contact.serialize('birthday') //-&gt; 'YYYY-MM-DD'\n</code></pre>Get the serialized Object form of the observe.  Serialized\ndata is typically used to send back to a server.</p>\n\n<pre><code>o.serialize() //-&gt; { name: 'Justin' }\n</code></pre>\n\n<p>Serialize currently returns the same data \nas [can.Observe.prototype.attrs].  However, in future\nversions, serialize will be able to return serialized\ndata similar to [can.Model].  The following will work:</p>\n\n<pre><code>new Observe({time: new Date()})\n  .serialize() //-&gt; { time: 1319666613663 }\n</code></pre>", "parents": ["can.Observe.prototype"], "src": "can/observe/observe.js", "line": 592, "hide": true, "children": []})