c({"name": "fixture", "type": "attribute", "comment": "<p><code>can.fixture</code> intercept an AJAX request and simulates the response with a file or function.\nRead more about the usage in the [overview can.fixture].</p>", "plugin": "can/util/fixture", "test": "can/util/fixture/qunit.html", "params": {"settings": {"order": 0, "description": "<p>Configures the AJAX requests the fixture should\nintercept.  If an <strong>object</strong> is passed, the object's properties and values\nare matched against the settings passed to can.ajax.</p>\n\n<p>If a <strong>string</strong> is passed, it can be used to match the url and type. Urls\ncan be templated, using <code>{NAME}</code> as wildcards.</p>", "name": "settings", "type": "Object|String", "optional": false}, "fixture": {"order": 1, "description": "<p>The response to use for the AJAX\nrequest. If a <strong>string</strong> url is passed, the ajax request is redirected\nto the url. If a <strong>function</strong> is provided, it looks like:</p>\n\n<pre><code>fixture( originalSettings, settings, callback, headers)\n</code></pre>\n\n<p>where:</p>\n\n<ul>\n<li>originalSettings - the orignal settings passed to can.ajax</li>\n<li>settings - the settings after all filters have run</li>\n<li>callback - a callback to call with the response if the fixture executes asynchronously</li>\n<li>headers - request headers</li>\n</ul>\n\n<p>If <strong>null</strong> is passed, and there is a fixture at settings, that fixture will be removed,\nallowing the AJAX request to behave normally.</p>", "name": "fixture", "type": "Function|String", "optional": false}}, "src": "can/util/fixture/fixture.js", "line": 258, "children": []})