c({"name": "can.ui.layout.Positionable", "type": "class", "comment": "<p>The positionable plugin allows you to position an element relative to\nanother. It abstracts all of the calculating you might have to do when\nimplementing UI widgets, such as tooltips and autocompletes.</p>\n\n<h1>Basic Example</h1>\n\n<p>Given the following markup:</p>\n\n<pre><code>&lt;a id=\"target\" href=\"http://jupiterjs.com/\"&gt;Bitovi!&lt;/a&gt;\n&lt;div id=\"tooltip\"&gt;Bitovi&lt;/div&gt;\n</code></pre>\n\n<p>To position the tooltip element above the anchor link, you would use the\nfollowing code:</p>\n\n<pre><code>// Initialize the positionable plugin\nnew can.ui.layout.Positionable($(\"#tooltip\"), {\n    my: \"bottom\",\n    at: \"top\",\n    of: $(\"#target\")\n});\n\n// Trigger the move event on the tooltip to move it's position\n$(\"#tooltip\").trigger(\"move\");\n</code></pre>\n\n<p>In the options passed to the positionable plugin, we're telling the plugin\nto align the bottom of the <code>#tooltip</code> element to the top of the\n<code>#target</code> element.</p>\n\n<h1>Autocomplete Example</h1>\n\n<p>Given the following markup:</p>\n\n<pre><code>&lt;form&gt;\n    &lt;label&gt;\n        Search\n        &lt;input type=\"text\" name=\"search\" /&gt;\n    &lt;/label&gt;\n&lt;/form&gt;\n&lt;ul id=\"autocomplete\"&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>You could easily implement an autocompleting search input using the\nfollowing code:</p>\n\n<pre><code>// Position the autocomplete list below the search input\nnew can.ui.layout.Positionable($(\"#autocomplete\"), {\n    my: \"top left\",\n    at: \"bottom left\",\n    of: $(\"#search\")\n});\n\n// Autocomplete controller\nvar Autocomplete = can.Control({\n    \"keyup\" : function( el, ev ) {\n        this.options.list.show();\n        $.ajax({\n            url : \"/search.php\",\n            data : el.val(),\n            success : this.callback(\"updateResults\")\n        });\n    },\n    \"blur\" : function() {\n        this.options.list.hide();\n    },\n    \"updateResults\" : function( json ) {\n        this.options.list.html( \"views/autocomplete-list.ejs\", json );\n    },\n    \"{list} li click\" : function( el, ev ) {\n        this.blur();\n        this.element.val( el.text() );\n    }\n});\n\n// Initialize the autocomplete controller on the search element\nnew Autocomplete($(\"#search\"), {\n    list: $(\"#autocomplete\")\n});\n</code></pre>\n\n<h2>Demo</h2>\n\n<div class='demo_wrapper' data-demo-src='canui/layout/positionable/positionable.html'></div>", "parents": ["canui"], "description": "Allows you to position an element relative to another element.", "params": {"options": {"order": 0, "description": "<p>Object literal describing how to position the\ncurrent element against another.</p>\n\n<ul>\n<li><code>my</code> {String} - String containing the edge of the positionable element to be\nused in positioning. Possbile values are:</li>\n<li><code>at</code> {String} - String containing the edge of the target element to be\nused in positioning.</li>\n<li>Possible values for both the <code>my</code> and <code>at</code> options include:\n<ul><li><code>\"top\"</code></li>\n<li><code>\"center\"</code></li>\n<li><code>\"bottom\"</code></li>\n<li><code>\"left\"</code></li>\n<li><code>\"right\"</code></li>\n<li>Horizontal and vertical values can be used in conjunction with\neachother, separated by a space. For example, <code>\"bottom left\"</code>.</li></ul></li>\n<li><code>of</code> {jQuery} - The target DOM element.</li>\n<li><code>collision</code> {String} - Collision strategy to be used in case the positionable\nelement does not fit in the window. Possible values include\n<ul><li><code>fit</code> - Attempts to position the element as close as possible to\nthe target without clipping the positionable.</li>\n<li><code>flip</code> - Flips the element to the opposite side of the target.</li>\n<li><code>none</code> - Don't use any collision strategey.</li></ul></li>\n<li><code>using</code> {Function} - function that recieves the calculated position\nin the format of <code>{ top: x, left: y }</code> to handle the positioning. If a\n<code>using</code> parameter is passed, the element won't be positioned\nautomatically, but must be positioned by hand in the <code>using</code> callback.</li>\n</ul>\n\n<p>This plugin is built on top of the <a href=\"http://docs.jquery.com/UI/Position\">jQuery UI Position Plugin</a>,\nso you may refer to their documentation for more advanced usage.</p>", "name": "options", "type": "Object", "optional": false}}, "src": "canui/layout/positionable/positionable.js", "line": 1, "children": ["can.ui.layout.Positionable.prototype"]})