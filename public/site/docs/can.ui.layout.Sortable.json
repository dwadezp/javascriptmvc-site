c({"name": "can.ui.layout.Sortable", "type": "class", "comment": "<p>Makes a sortable control that can accept outside draggables.\nThis is useful for making lists that can be added to, removed\nfrom, or re-ordered.</p>\n\n<h2>Basic Example</h2>\n\n<p>If you have the following html:</p>\n\n<pre><code>&lt;div id='vegetables'&gt;\n    &lt;div class='sortable'&gt;Carrots&lt;/div&gt;\n    &lt;div class='sortable'&gt;Onions&lt;/div&gt;\n    &lt;div class='sortable'&gt;Lettuce&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The following will make the list sortable:</p>\n\n<pre><code>new can.ui.layout.Sortable($('#vegetables'));\n</code></pre>\n\n<p>Additionally, you can set up draggable items:</p>\n\n<pre><code>&lt;div id='draggables'&gt;\n    &lt;div class='draggable'&gt;Potatoes&lt;/div&gt;\n    &lt;div class='draggable'&gt;Peppers&lt;/div&gt;\n    &lt;div class='draggable'&gt;Beans&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Then make them draggable:</p>\n\n<pre><code>$('.draggable').bind(\"draginit\",function(){})\n</code></pre>\n\n<p>This will allow you to have the list of items that can be re-ordered,\nbut you can also add new items by dragging them into the list.</p>\n\n<h2>Demo</h2>\n\n<div class='demo_wrapper' data-demo-src='canui/layout/sortable/demo.html'></div>\n\n<h2>How it works</h2>\n\n<p>When re-ordering items, the drag position of the item is monitored. When\nthe item is dragged past the midpoint of the next item (as determined by\n[can.ui.layout.Sortable.prototype.where where]), they have their spots\nswapped.</p>\n\n<p>When injecting new items, the item is dragged over the list and creates a\nclone of the new item using the <code>makePlaceHolder</code> option method. The clone\nhas its visibility hidden until the new item is dropped into the list.</p>\n\n<h2>Using a custom placeholder</h2>\n\n<p>By default, the dragged element will be cloned and injected into the list.\nThis process can be overridden by setting a custom <code>makePlaceHolder</code>\noption method.</p>\n\n<pre><code>new can.ui.layout.Sortable($(\"#vegetables\", {\n    makePlaceHolder : function(el, ev, drop, drag){\n        return drag.element.clone().css({\n            \"backgroundColor\" : \"blue\",\n            \"visibility\" : \"hidden\",\n            \"position\" : \"\",\n            \"float\" : \"left\"\n        });\n    }\n});\n</code></pre>\n\n<h2>Injecting a group of elements with a single drag</h2>\n\n<p>Multiple items can be injected into the list while dragging a single item\nby changing the <code>makePlaceHolder</code> option method to return more than one\nplaceholder.</p>\n\n<pre><code>new can.ui.layout.Sortable($(\"#vegetables\"), {\n    makePlaceHolder : function(el, ev, drop, drag){\nvar css = {\n    \"visibility\":\"hidden\",\n    \"position\" : \"\",\n    \"float\" : \"left\"\n},\n placeholders = $(drag.movingElement).clone().css(css);\n$.each($.find('.draggables').not(drag.movingElement),\n     function(i, child) {\n        placeholders = placeholders.add($(child).clone().css(css));\n     });\n    return placeholders;\n}\n});\n</code></pre>", "parents": ["canui"], "test": "canui/layout/sortable/funcunit.html", "description": "Makes a sortable control that can accept outside draggables.", "construct": "", "ret": {"description": "", "type": "can.ui.layout.Sortable"}, "params": {"el": {"order": 0, "description": "", "name": "el", "type": "HTMLElement", "optional": false}, "options": {"order": 1, "description": "<p>Values to configure\nthe behavior of sortable:</p>\n\n<ul>\n<li><code>makePlaceHolder</code> - A function used to create a placeholder clone of\n    dragged element.</li>\n<li><code>sortable</code> - The name of the class to be used for sortable items.</li>\n<li><code>direction</code> - The direction with which to constrain dragging within\nthe list: <code>\"horizontal\"</code> (default) or <code>\"vertical\"</code>.</li>\n<li><code>scrolls</code> - The element to scroll as the size of the list changes.</li>\n<li><code>scrollOptions</code> - Additional scrolling options.</li>\n</ul>", "name": "options", "type": "Object", "optional": true}}, "src": "canui/layout/sortable/sortable.js", "line": 10, "children": ["can.ui.layout.Sortable.prototype"]})