c({"name": "can.bind", "type": "function", "comment": "<p><code>can.bind(obj, eventName, handler)</code> binds a callback handler\non an object for a given event.  It works on:</p>\n\n<ul>\n<li>HTML elements and the window</li>\n<li>Nodelists of the underlying library</li>\n<li>Objects</li>\n<li>Objects with bind / unbind methods</li>\n</ul>\n\n<p>The idea is that bind can be used on anything that produces events\nand it will figure out the appropriate way to \nbind to it.  Typically, <code>can.bind</code> is only used internally to\nCanJS; however, if you are making libraries or extensions, use\n<code>can.bind</code> to listen to events independent of the underlying library.</p>\n\n<p><strong>Binding to an object</strong></p>\n\n<pre><code>var obj = {};\ncan.bind(obj,\"something\", function(ev, arg1, arg){\n    arg1 // 1\n    arg2 // 2\n})\ncan.trigger(obj,\"something\",[1,2])\n</code></pre>\n\n<p><strong>Binding to an HTMLElement</strong></p>\n\n<pre><code>var el = document.getElementById('foo')\ncan.bind(el, \"click\", function(ev){\n    this // el\n})\n</code></pre>\n\n<p><strong>Binding to a NodeList</strong></p>\n\n<pre><code>can.bind( $(\"#foo\") , \"click\", function(){\n\n})\n</code></pre>", "parents": ["can.bind"], "src": "can/util/util.js", "line": 135, "children": []})