c({"name": "rapidstart", "type": "page", "comment": "<p>So, you're too lazy for the [getstarted Getting Started Guide] and want something even quicker.  Here's\na cheat sheet of 'how-tos' with JavaScriptMVC.</p>\n\n<h2>How to get JavaScriptMVC:</h2>\n\n<p>[download Download it] or [developwithgit pull it from Git].  JavaScriptMVC is a collection of 4 projects. \nOnce you have JavaScriptMVC, you should have a folder with:</p>\n\n<pre><code>documentjs - documentation engine\nfuncunit   - testing app\njquery     - jquery and jQueryMX plugins\nsteal      - dependency management\njs         - JS command line for Linux/Mac\njs.bat     - JS command line for Windows\n</code></pre>\n\n<p><b>Notice</b>: This folder, the one that has all the JMVC sub projects is called the [rootfolder ROOT FOLDER]</b>.</p>\n\n<h2>How to get JavaScriptMVC running on my page:</h2>\n\n<p>Well, typically, the first thing you'd do is use the [steal.generate Generators] to\ncreate an application folder, complete with testing, build scripts, and documentation scripts.  But,\nwe're doing things the no-magic way!</p>\n\n<p>JavaScriptMVC uses [steal steal/steal.js] for dependency management.  It allows you to load scripts that\nmight load other scripts and so forth.  To use JavaScriptMVC's features like [jQuery.Controller] and [jQuery.View],\nyou 'steal' them like:</p>\n\n<pre><code>steal.plugins('jquery/controller','jquery/view').then(function(){\n   //code that uses controller and view goes here\n})\n</code></pre>\n\n<p>To start 'stealing' JMVC, you need to add the steal script to your page.\nLets say you have a folder in the [rootfolder root folder] called <code>helloworld</code> that looks like:</p>\n\n<pre><code>ROOT\\\n    documentjs\\\n    jquery\\\n    funcunit\\\n    steal\\\n    helloworld\\\n      helloworld.js\n      helloworld.html\n</code></pre>\n\n<p>To load <code>steal.js</code> and <code>helloworld.js</code>, put a script tag in <code>helloworld.html</code> like:</p>\n\n<pre><code>&lt;script type='text/javascript'\n        src='../steal/steal.js?helloworld.js'&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>This loads the steal script and your helloworld script.  Now you can use steal to load whatever you want!</p>\n\n<h2>How to create a jQuery plugin / organize code:</h2>\n\n<p>[jQuery.Controller] is used to \nmake [http://jupiterjs.com/news/writing-the-perfect-jquery-plugin perfect widget plugins].  </p>\n\n<p>The following makes a tab plugin:</p>\n\n<pre><code>steal.plugins('jquery/controller').then(function(){\n\n$.Controller(\"Tabs\",{\n\n  // initialize widget\n  init : function(el){\n\n    // activate the first tab\n    $(el).children(\"li:first\").addClass('active')\n\n    // hide the other tabs\n    var tab = this.tab;\n    this.element.children(\"li:gt(0)\").each(function(){\n      tab($(this)).hide()\n    })\n  },\n\n  // helper function finds the tab for a given li\n  tab : function(li){\n    return $(li.find(\"a\").attr(\"href\"))\n  },\n\n  // hides old active tab, shows new one\n  \"li click\" : function(el, ev){\n    ev.preventDefault();\n    this.tab(this.find('.active').removeClass('active')).hide()\n    this.tab(el.addClass('active')).show();\n  }\n})\n\n});\n</code></pre>\n\n<p>You can see this in action [http://javascriptmvc.com/jquery/controller/controller.html here].  There are a few things to \nnotice about controller:</p>\n\n<ul>\n<li><p>It creates a jQuery plugin for you.  In this case, you can\nmake a tabs like:</p>\n\n<pre><code>$('#myTabsElement').tabs() // ==&gt; new Tabs( $(\"#myTabsElement\") ) \n</code></pre></li>\n<li><p>The element you add the controller to (#myTabsElement), becomes <code>this.element</code> in the controller.</p></li>\n<li><p>It automatically [http://api.jquery.com/delegate/ delegates] event handlers named like: \"li click\" on\n<code>this.element</code>.</p></li>\n</ul>\n\n<h2>How to use a template:</h2>\n\n<p>Lets say you have an [jQuery.EJS] template in the root folder named <code>mytemplate.ejs</code> that looks like:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;% for( var i =0; i &lt; items.length; i++ ){ %&gt;\n      &lt;li&gt;&lt;%= item[i] %&gt;\n    &lt;% } %&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>And you wanted to draw a list of items in an element with id <code>itemslist</code>.  You do it like:</p>\n\n<pre><code>steal.plugins('jquery/view/ejs').then(function(){\n\n  $('#itemslist').html('//mytemplate.ejs', {items:[\"apple\",\"orange\"]});\n\n})\n</code></pre>\n\n<h2>How to organize services:</h2>\n\n<p>Your server is producing a list of pizza topings at <code>GET /toppings</code>.  The data that comes back\nlooks like:</p>\n\n<pre><code>[{'id' : 1, 'name': 'cheese'},\n {'id' : 2, 'name': 'mushrooms'}]\n</code></pre>\n\n<p>You want to be able to get a list of topings and know if they are tasty (ie, is not mushrooms).  To do this, \ncreate a Model like:</p>\n\n<pre><code>steal.plugins('jquery/model').then(function(){\n\n  $.Model('Topping',\n  {\n    findAll : '/toppings'\n  },\n  {\n    isTasty : function(){\n      return this.name != 'mushroom'\n    }\n  });\n\n});\n</code></pre>\n\n<p>Now you can get a list of toppings wrapped with additional \nhelper functions like <code>isTasty</code>:</p>\n\n<pre><code>Topping.findAll({},function(toppings){\n  alert('the first is ' + \n          toppings[0].isTasty() ? 'tasty' : 'gross' )\n});\n</code></pre>\n\n<h2>How to test:</h2>\n\n<p>JavaScriptMVC uses [FuncUnit] for testing.  FuncUnit supports two types of testing:</p>\n\n<ul>\n<li>functional - simulate clicks and keypresses a user would make.</li>\n<li>unit - call directly to JS methods and test the results.</li>\n</ul>\n\n<p>But you start creating these tests in the same way - by making a test page\nand a test script. Lets say you wanted to\ntest <code>helloworld.js</code> and <code>helloworld.html</code>.  Without code generators,\nyou add 4 files to make helloworld look like:</p>\n\n<pre><code>helloworld\\\n    helloworld.html\n    helloworld.js\n    funcunit.html\n    funcunit.js\n    qunit.html\n    qunit.js\n</code></pre>\n\n<p>Put the following in qunit.html:</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"../funcunit/qunit/qunit.css\" /&gt;\n    &lt;script type='text/javascript' src='../steal/steal.js?helloworld\\qunit.js'&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1 id=\"qunit-header\"&gt;Hello World Unit Test Suite&lt;/h1&gt;\n    &lt;h2 id=\"qunit-banner\"&gt;&lt;/h2&gt;\n    &lt;div id=\"qunit-testrunner-toolbar\"&gt;&lt;/div&gt;\n    &lt;h2 id=\"qunit-userAgent\"&gt;&lt;/h2&gt;\n    &lt;div id=\"test-content\"&gt;&lt;/div&gt;\n    &lt;ol id=\"qunit-tests\"&gt;&lt;/ol&gt;\n    &lt;div id=\"qunit-test-area\"&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>funcunit.html will look the same except change <code>qunit.js</code> to <code>funcunit.js</code>.</p>\n\n<p>qunit.js might look like:</p>\n\n<pre><code>steal.plugins('funcunit/qunit').then('//helloworld/helloworld', function(){\n\n  module('helloworld')\n\n  test('something is there', function(){\n    ok(helloworld, \"there's an object called helloworld\");\n  })\n\n})\n</code></pre>\n\n<p>funcunit.js might look like:</p>\n\n<pre><code>steal.plugins('funcunit').then( function(){\n\n  module('helloworld',{\n    setup : function(){\n      S.open('//helloworld/helloworld.html');\n    }\n  })\n\n  test('The page says hello world', function(){\n    ok(S(':contains(hello world)').size(), \"The page says hello world\");\n  })\n\n})\n</code></pre>\n\n<p>To run these tests, you can either open the test page with your browser, or with envjs:</p>\n\n<pre><code>funcunit\\envjs helloworld\\funcunit.html\nfuncunit\\envjs helloworld\\qunit.html\n</code></pre>", "title": "Rapid Start", "src": "jmvc/pages/rapidstart.js", "line": 0, "children": ["rootfolder"]})