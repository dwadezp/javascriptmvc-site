C({"name": "setup", "type": "page", "comment": "<h2>Getting Started with Generators</h2>\n\n<p>This guide assumes you're using a full JavaScript download with Steal.  The easiest way to get started \nis to use generators to get a basic test in place.  </p>\n\n<p>From a command line, cd to the root of the your JMVC directory and run:</p>\n\n<pre><code class='javascript'>./js jquery/generate/controller Company.Widget</code></pre>\n\n<p>This will create the following folder structure:</p>\n\n<p><img class='image_tag' src='jmvc/images/funcunitfolder.png' />\n<br />Open funcunit.html in a browser:</p>\n\n<p><img class='image_tag' src='jmvc/images/funcunithtml.png' />\n<br />If your popup blocker is off, a separate page (the application) opens in a separate window, an assertion runs, and your test passes.</p>\n\n<p>To add your own test, open widget_test.js and modify the existing test or add your own.</p>\n\n<p>Note that the jquery/generate/app or jquery/generate/plugin generators will create similar basic funcunit pages.  </p>\n\n<h2>What's Actually Happening</h2>\n\n<p>Funcunit.html is doing the following:</p>\n\n<ol>\n<li>Loading QUnit's CSS.</li>\n<li>Loading steal.js and telling it to load widget_test.js as its top level JS file. </li>\n<li>Adding the necessary HTML that QUnit needs.</li>\n</ol>\n\n<p>Steal.js loads first.  It loads widget_test.js, which:</p>\n\n<ol>\n<li>Loads funcunit, and all its dependencies (including QUnit).</li>\n<li>Defines a very basic test.</li>\n</ol>", "title": "1. Getting Set Up", "parents": ["FuncUnit"], "src": "../funcunit/pages/setup.js", "children": []})