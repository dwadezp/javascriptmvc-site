c({"name": "can.Observe.attributes", "type": "page", "comment": "<p><code>can.Observe.attributes</code> is a hash map of attribute names and types. Attributes when used in conjunction with\nconvert can provide rich functionality for converting data attributes from raw types and serializing complex\ntypes for the server.</p>\n\n<p>Below is an example of an Observe providing serialization and conversion.</p>\n\n<pre><code>var Birthday = new can.Observe({\n    attributes: {\n        birthday: 'date'\n        age: 'number'\n    },\n    serialize : {\n        date : function( val, type ){\n            return val.getYear() + \n                    \"-\" + (val.getMonth() + 1) + \n                    \"-\" + val.getDate(); \n        },\n        number: (val){\n            return val + '';\n        }\n    },\n    convert: {\n        // converts string to date\n        date: function( date ) {\n            if ( typeof date == 'string' ) {\n                //- Extracts dates formated 'YYYY-DD-MM'\n                var matches = raw.match( /(\\d+)-(\\d+)-(\\d+)/ ); \n\n                //- Parses to date object and returns\n                date = new Date( matches[ 1 ],\n                        ( +matches[ 2 ] ) - 1, \n                        matches[ 3 ] ); \n            }\n\n            return date;\n        },\n\n        // converts string to number\n        number: function(number){\n            if(typeof number === 'string'){\n                number = parseInt(number);\n            }\n            return number;\n        }\n    }\n});\n\nvar brian = new Birthday();\n\n// sets brian's birthday\nbrian.attr('birthday', '11-29-1983');\n\n//- returns newly converted date object\nvar date = brian.attr('birthday');\n\n//- returns { 'birthday': '11-29-1983, 'age': '28' }\nvar seralizedObj = brian.serialize();\n</code></pre>\n\n<h2>Associations</h2>\n\n<p>Attribute type values can also represent the name of a function. The most common case this is used is for associated data.</p>\n\n<p>For example, a Deliverable might have many tasks and an owner (which is a Person). The attributes property might look like:</p>\n\n<pre><code>var Deliverable = new can.Observe({\n    attributes : {\n        tasks : \"App.Models.Task\"\n        owner: \"App.Models.Person\"\n    }\n});\n</code></pre>\n\n<p>This points tasks and owner properties to use <em>Task</em> and <em>Person</em> to convert the raw data into an array of Tasks and a Person.</p>\n\n<h2>Demo</h2>\n\n<p>Below is a demo that showcases convert being used on an Observable.  </p>\n\n<p>When a user enters a new date in the format of <em>YYYY-DD-MM</em>, the control \nlistens for changes in the input box and updates the Observable using \nthe <code>attr</code> method which then converts the string into a JavaScript date object.  </p>\n\n<p>Additionally, the control also listens for changes on the Observable and \nupdates the age in the page for the new birthdate of the contact.</p>\n\n<div class='demo_wrapper' data-demo-src='can/observe/attributes/attributes.html'></div>", "parents": ["can.Observe"], "plugin": "can/observe/attributes", "test": "can/observe/attributes/qunit.html", "download": "http://donejs.com/can/dist/can.observe.attributes.js", "src": "can/observe/attributes/attributes.md", "children": []})