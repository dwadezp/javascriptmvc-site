c({"name": "can.Observe.attributes", "type": "page", "comment": "<p>Attributes contains a map of attribute names/types. You can use this in conjunction with \ncan.Observe.convert to provide automatic type conversion.</p>\n\n<pre><code>can.Observe(\"Contact\",{\n    attributes : {\n        birthday : 'date'\n    },\n    convert : {\n        date : function(raw){\n            if(typeof raw == 'string'){\n                var matches = raw.match(/(\\d+)-(\\d+)-(\\d+)/);\n                return new Date( matches[1], (+matches[2])-1, matches[3] );\n            }else if(raw instanceof Date){\n                return raw;\n            }\n        }\n    }\n},{})\n</code></pre>\n\n<p>*Note: Its important to include this plugin before you include other plugins that \nextend Observe so that prototype chain is extended correctly.</p>\n\n<h2>Type Conversion</h2>\n\n<p>You often want to convert from what the observe sends you to a form more useful to JavaScript. \nFor example, contacts might be returned from the server with dates that look like: \"1982-10-20\". \nWe can observe to convert it to something closer to new Date(1982,10,20). We can do this in two ways: Setters and Convert.</p>\n\n<p>Convert comes with the following types:</p>\n\n<pre><code>date - Converts to a JS date. Accepts integers or strings that work with Date.parse\nnumber - an integer or number that can be passed to parseFloat\nboolean - converts \"false\" to false, and puts everything else through Boolean()\n</code></pre>\n\n<h3>Setters</h3>\n\n<p>The <em>attrs</em> and <em>attr</em> function look for a <em>setATTRNAME</em> function to handle setting the date property.</p>\n\n<p>By providing a function that takes the raw data and returns a form useful for JavaScript, \nwe can make our observes (which use <em>attrs</em> and <em>attr</em>) automatically convert data.</p>\n\n<h3>Convert</h3>\n\n<p>If you have a lot of dates, Setters won't scale well. Instead, you can set the type of an attribute \nand provide a function to convert that type.</p>\n\n<p>The following sets the birthday attribute to \"date\" and provides a date conversion function:</p>\n\n<pre><code>can.Observe(\"Contact\",\n{\n    attributes : { \n        birthday : 'date'\n    },\n    convert : {\n        date : function(raw){\n            if(typeof raw == 'string'){\n                var matches = raw.match(/(\\d+)-(\\d+)-(\\d+)/)\n                return new Date( matches[1], (+matches[2])-1, matches[3] )\n            }else if(raw instanceof Date){\n                return raw;\n            }\n        }\n    }\n}, { })\n</code></pre>\n\n<h2>Serialization</h2>\n\n<p>Serialization occurs before the observe is saved. This allows you to prepare your observe's\nattributes before they're sent to the server.</p>\n\n<p>By default every attribute will be passed through the 'default' serialization method \nthat will return the value if the property holds a primitive value (string, number, ...), \nor it will call the \"serialize\" method if the property holds an object with the \"serialize\" method set.</p>\n\n<p>You can set the serialization methods similar to the convert methods:</p>\n\n<pre><code>can.Observe(\"Contact\",\n{\n    attributes : { \n        birthday : 'date'\n    },\n    serialize : {\n        date : function( val, type ){\n            return val.getYear() + \"-\" + (val.getMonth() + 1) + \"-\" + val.getDate(); \n        }\n    }\n},{ })\n</code></pre>\n\n<p>This code will format the 'birthday' attribute as '2011-11-24' before it will be sent to the server.</p>", "parents": ["can.Observe"], "src": "can/observe/attributes/attributes.md", "children": []})