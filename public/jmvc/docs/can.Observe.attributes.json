c({"name": "can.Observe.attributes", "type": "page", "comment": "<p>Attributes contains a map of attribute names/types. You can use this in conjunction with \nconvert to provide automatic type conversion.</p>\n\n<h2>Type Conversion</h2>\n\n<p>You often want to convert from what the observe sends you to a form more useful to JavaScript. \nFor example, contacts might be returned from the server with dates that look like: \"1982-10-20\". \nWe can observe to convert it to something closer to <code>new Date(1982,10,20)</code>.</p>\n\n<p>Convert comes with the following types:</p>\n\n<ul>\n<li><strong>date</strong> Converts to a JS date. Accepts integers or strings that work with Date.parse</li>\n<li><strong>number</strong> An integer or number that can be passed to parseFloat</li>\n<li><strong>boolean</strong> Converts \"false\" to false, and puts everything else through Boolean()</li>\n</ul>\n\n<h3>Convert</h3>\n\n<p>You can set the type of an attribute and provide a function to convert that type. \nThe following sets the birthday attribute to \"date\" and provides a date conversion function:</p>\n\n<pre><code>var Contact = can.Observe({\n    attributes : {\n        birthday : 'date'\n    },\n    convert : {\n        date : function(raw){\n            if(typeof raw == 'string'){\n                var matches = raw.match(/(\\d+)-(\\d+)-(\\d+)/);\n\n                return new Date(matches[1], \n                                (+matches[2])-1, \n                                matches[3]);\n\n            }else if(raw instanceof Date){\n                return raw;\n            }\n        }\n    }\n},{});\n\n//- calls convert on attribute set\nContact.attr('birthday', '4-26-2012') \n\n//- returns newly converted date object\nContact.attr('birthday') \n</code></pre>\n\n<h2>Serialization</h2>\n\n<p>Serialization occurs before the observe is saved. This allows you to prepare your observe's\nattributes before they're sent to the server.</p>\n\n<p>By default every attribute will be passed through the 'default' serialization method \nthat will return the value if the property holds a primitive value (string, number, ...), \nor it will call the \"serialize\" method if the property holds an object with the \"serialize\" method set.</p>\n\n<p>You can set the serialization methods similar to the convert methods:</p>\n\n<pre><code>var Contact = can.Observe({\n    attributes : { \n        birthday : 'date'\n    },\n    serialize : {\n        date : function( val, type ){\n            return val.getYear() + \n                \"-\" + (val.getMonth() + 1) + \n                \"-\" + val.getDate(); \n        }\n    }\n},{})\n\nContact.serialize()\n    //- Returns the 'birthday' attribute in format 'YYYY-MM-DD'\n    //- {\n    //-     birthday: 'YYYY-MM-DD'\n    //- }\n</code></pre>", "parents": ["can.Observe"], "plugin": "can/observe/attributes", "test": "can/observe/attributes/qunit.html", "download": "http://donejs.com/can/dist/can.observe.attributes.js", "src": "can/observe/attributes/attributes.md", "children": []})