c({"name": "mvc.class", "type": "page", "comment": "<p>Can's Control and Model inherit from its Class helper - [Can.Construct]. To create a class, call <code>$.Class(NAME, [classProperties, ] instanceProperties])</code>. </p>\n\n<pre><code>$.Class(\"Animal\",{\n  breathe : function(){\n     console.log('breathe'); \n  }\n});\n</code></pre>\n\n<p>In the example above, instances of Animal have a <code>breathe()</code> method. We can create a new <code>Animal</code> instance and call <code>breathe()</code> on it like:</p>\n\n<pre><code>var man = new Animal();\nman.breathe();\n</code></pre>\n\n<p>If you want to create a sub-class, simply call the the base class with the sub-class's name and properties:</p>\n\n<pre><code>Animal(\"Dog\",{\n  wag : function(){\n    console.log('wag');\n  }\n})\n\nvar dog = new Dog;\ndog.wag();\ndog.breathe();\n</code></pre>\n\n<h3>Instantiation</h3>\n\n<p>When a new class instance is created, it calls the class's <code>init</code> method with the arguments passed to the constructor function:</p>\n\n<pre><code>$.Class('Person',{\n  init : function(name){\n    this.name = name;\n  },\n  speak : function(){\n    return \"I am \"+this.name+\".\";\n  }\n});\n\nvar payal = new Person(\"Payal\");\nassertEqual( payal.speak() ,  'I am Payal.' );\n</code></pre>\n\n<h3>Calling base methods</h3>\n\n<p>Call base methods with <code>this._super</code>.  The following overwrites person\nto provide a more 'classy' greating:</p>\n\n<pre><code>Person(\"ClassyPerson\", {\n  speak : function(){\n    return \"Salutations, \"+this._super();\n  }\n});\n\nvar fancypants = new ClassyPerson(\"Mr. Fancy\");\nassertEquals( fancypants.speak() , 'Salutations, I am Mr. Fancy.')\n</code></pre>\n\n<h3>Proxies</h3>\n\n<p>Class's callback method returns a function that has 'this' set appropriately (similar to <a href=\"http://api.jquery.com/jQuery.proxy/\">$.proxy</a>).  The following creates a clicky class that counts how many times it was clicked:</p>\n\n<pre><code>$.Class(\"Clicky\",{\n  init : function(){\n    this.clickCount = 0;\n  },\n  clicked: function(){\n    this.clickCount++;\n  },\n  listen: function(el){\n    el.click( this.callback('clicked') );\n  }\n})\n\nvar clicky = new Clicky();\nclicky.listen( $('#foo') );\nclicky.listen( $('#bar') ) ;\n</code></pre>\n\n<h3>Static Inheritance</h3>\n\n<p>Class lets you define inheritable static properties and methods.  The following allows us to retrieve a person instance from the server by calling <code>Person.findOne(ID, success(person) )</code>.  Success is called back with an instance of Person, which has the <code>speak</code> method.</p>\n\n<pre><code>$.Class(\"Person\",{\n  findOne : function(id, success){\n    $.get('/person/'+id, function(attrs){\n      success( new Person( attrs ) );\n    },'json')\n  }\n},{\n  init : function(attrs){\n    $.extend(this, attrs)\n  },\n  speak : function(){\n    return \"I am \"+this.name+\".\";\n  }\n})\n\nPerson.findOne(5, function(person){\n  assertEqual( person.speak(), \"I am Payal.\" );\n})\n</code></pre>\n\n<h3>Introspection</h3>\n\n<p>Class provides namespacing and access to the name of the class and namespace object:</p>\n\n<pre><code>$.Class(\"Jupiter.Person\");\n\nJupiter.Person.shortName; //-&gt; 'Person'\nJupiter.Person.fullName;  //-&gt; 'Jupiter.Person'\nJupiter.Person.namespace; //-&gt; Jupiter\n\nvar person = new Jupiter.Person();\n\nperson.Class.shortName; //-&gt; 'Person'\n</code></pre>\n\n<h3>Model example</h3>\n\n<p>Putting it all together, we can make a basic ORM-style model layer.  Just by inheriting from Model, we can request data from REST services and get it back wrapped in instances of the inheriting Model.</p>\n\n<pre><code>$.Class(\"Model\",{\n  findOne : function(id, success){\n    $.get('/'+this.fullName.toLowerCase()+'/'+id, \n      this.callback(function(attrs){\n         success( new this( attrs ) );\n      })\n    },'json')\n  }\n},{\n  init : function(attrs){\n    $.extend(this, attrs)\n  }\n})\n\nModel(\"Person\",{\n  speak : function(){\n    return \"I am \"+this.name+\".\";\n  }\n});\n\nPerson.findOne(5, function(person){\n  alert( person.speak() );\n});\n\nModel(\"Task\")\n\nTask.findOne(7,function(task){\n  alert(task.name);\n})\n</code></pre>\n\n<p>This is similar to how JavaScriptMVC's model layer works. Please continue to [mvc.model Model].</p>", "title": "Class", "parents": ["mvc"], "order": 0, "src": "tutorials/mvc/mvc.class.md", "children": []})