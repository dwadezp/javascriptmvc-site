c({"name": "Mxui.Layout.Modal", "type": "class", "comment": "<p>A basic modal implementation. </p>\n\n<h2>Use</h2>\n\n<p>Call <code>mxui_layout_modal</code> method on any jQuery object.</p>\n\n<pre><code>$('#modal').mxui_layout_modal();\n</code></pre>\n\n<p>This will take the jQuery object and place it centered\non the window. If you want an overlay over the page behind the modal, use\nthe overlay option:</p>\n\n<pre><code>$('modal').mxui_layout_modal({\n    overlay: true\n});\n</code></pre>\n\n<p>This will create <div class=\"mxui_layout_modal-overlay\"></div> element \nand display it over the page. Default CSS applied to the overlay is:</p>\n\n<pre><code>.mxui_layout_modal-overlay {\n    background: rgba(0,0,0,0.5);\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n}\n</code></pre>\n\n<p>You can either overwrite that CSS in your stylesheet, or you\ncan use pass the overlay class as an option to the mxui<em>layout</em>modal:</p>\n\n<pre><code>$('modal').mxui_layout_modal({\n    overlay: true, \n    overlayClass: 'my-overlay-class'\n});\n</code></pre>\n\n<p>Alternatively, if you'd like to use a custom element as your overlay,\nsimply pass it in the overlay option:</p>\n\n<pre><code>$('modal').mxui_layout_modal({\n    overlay: $(\".custom_overlay\")\n});\n</code></pre>\n\n<p>By default modals will be hidden and left in the DOM after you trigger \"hide\"\non the modal element. If you want to destroy the modal (and overlay) you can pass\ntrue to the destroyOnHide option:</p>\n\n<pre><code>$('modal').mxui_layout_modal({\n    destroyOnHide: true\n});\n</code></pre>\n\n<p>You can hide or destroy the modal by pressing the \"Escape\" key or by clicking on\nthe overlay element (if overlay exists).</p>\n\n<p>Modals can also be attached to an element rather than the window using\nthe <code>of</code> option.</p>\n\n<pre><code>$('modal').mxui_layout_modal({\n    of : $(\"#box\"),\n    overlay: true\n});\n</code></pre>\n\n<p>Modal windows can be stacked one on top of another. If modal has overlay, it will\ncover the existing modal windows. If you use the \"Escape\" key to hide the modals\nthey will be hidden one by one in the reverse order they were created.</p>\n\n<h2>Demo</h2>\n\n<div class='demo_wrapper' data-demo-src='mxui/layout/modal/modal.html'></div>", "parents": ["Mxui"], "test": "mxui/layout/modal/funcunit.html", "description": "A basic modal implementation. ", "construct": "", "ret": {"description": "", "type": "mxui.layout.modal"}, "params": {"options": {"order": 0, "description": "<p>Values to configure the behavior of modal:</p>\n\n<ul>\n<li><code>overlay</code> - An element to block the screen behind the modal. When\nclicked, the modal closes.\n<ul><li><code>{Boolean}</code> - If true an overlay will be created and used.</li>\n<li><code>{HTMLElement}</code> - If an element is passed, that element will be\nused as the overlay. This is useful for implementing custom\noverlays.</li></ul></li>\n<li><code>overlayClass</code> - <code>{String}</code> - A class name to be added to the overlay element.</li>\n<li><code>of</code> - <code>{HTMLElement}</code> - The element you would like the modal to be applied to. The\ndefault is the <code>window</code>.</li>\n<li><code>destroyOnHide</code> - <code>{Boolean}</code> - If <code>true</code>, the modal will be\ndestroyed when it's <code>hide</code> method is called.</li>\n</ul>", "name": "options", "type": "Object", "optional": true}}, "src": "mxui/layout/modal/modal.js", "line": 1, "children": ["Mxui.Layout.Modal.prototype"]})