C({"name": "creating", "type": "page", "comment": "<p>We're going to create a basic cookbook application that\nlets us create, and delete recipes. It will look like:</p>\n\n<p><img src='http://wiki.javascriptmvc.com/wiki/images/c/c8/Cookbook.png'/></p>\n\n<p>JavaScriptMVC uses \n[steal.generate generator scripts] to \nassist you\nin setting up your application's \nfiles and folders.  They make everything you need to fall\ninto the pit of success!</p>\n\n<h2>Generating an Application</h2>\n\n<p>To create your application, open a console window and \nnavigate to your public directory. Run:</p>\n\n<pre><code class='text'>> js jquery\\generate\\app cookbook</code></pre>\n\n<p>This script creates an application folder and \nfiles. Here's what each file does:</p>\n\n<pre><code class='javascript'>cookbook/                // folder for your app\n  cookbook.css           // css for your app\n  cookbook.html          // a page for your app\n  cookbook.js            // app file, loads other files\n  docs/                  // documentation\n  fixtures/              // simulated ajax responses\n  funcunit.html          // functional test page\n  models/                // model & data layers\n  qunit.html             // unit test page\n  scripts/               // command line scripts\n    build.html           // html for build script\n    build.js             // build script\n    clean.js             // code cleaning / linting\n    crawl.js             // generate search content\n    docs.js              // create documentation\n  test/                    \n    funcunit             // functional tests\n      cookbook_test.js   // functional test\n      funcunit.js        // loads functional tests\n    qunit/               // unit tests\n      cookbook_test.js   // unit test\n      qunit.js           // loads unit tests</code></pre>\n\n<p>Read [folders Folder and File Organization]\nfor more information.</p>\n\n<p>We'll use cookbook.html for our application. If \nyou need to make another page for your app you \ncan generate it:</p>\n\n<pre><code class='text'>> js jquery\\generate\\page cookbook index.html\nGenerating ... index.html</code></pre>\n\n<p>Or you add the steal script to an existing page \npage followed by <code>?cookbook</code> like:</p>\n\n<pre><code class='html'>&lt;script type='text/javascript'\n        src='../path/to/steal/steal.js?cookbook'>\n&lt;/script></code></pre>\n\n<p>If you open cookbook/cookbook.html, you'll see a\nJavaScriptMVC welcome screen.  </p>\n\n<p><img src='http://wiki.javascriptmvc.com/wiki/images/4/42/Welcome.png' /></p>\n\n<p>Open <code>cookbook/cookbook.html</code> and you will find:</p>\n\n<pre><code class='html'><script type='text/javascript' \n        src='<%= path_to_steal %>/steal/steal.js?<%= path %>'>     \n</script></code></pre>\n\n<p>This line loads [steal] and tells steal to \nload <code>cookbook/cookbook.js</code>. <code>cookbook/cookbook.js</code> is\nyour application file.  Open it and you will find:</p>\n\n<pre><code>steal(\n    './cookbook.css',           // application CSS file\n    './models/models.js',       // steals all your models\n    './fixtures/fixtures.js',   // sets up fixtures for your models\n    function(){                 // configure your application\n\n})\n</code></pre>\n\n<p>The application file loads and configures your applications resources.  Currently,\nit's loading the app's css file, models and fixtures (there are no fixtures or models yet).</p>\n\n<p>Now it's time to make some widgets, models, and fixtures that allow us to create and delete\nrecipes!  </p>\n\n<h2>Scaffolding Recipes</h2>\n\n<p>We'll use the scaffold generator to quickly create:</p>\n\n<ul>\n<li>A Recipe model for CRUDing recipes on the server</li>\n<li>A Fixture for simulating a recipe service</li>\n<li>A widget for creating recipes</li>\n<li>A widget for listing and deleting recipes</li>\n</ul>\n\n<p>To scaffold recipes run the following in the command-line console:</p>\n\n<pre><code class='text'>> js jquery\\generate\\scaffold Cookbook.Models.Recipe</code></pre>\n\n<p>Here's what each part does:</p>\n\n<p><strong>recipe.js</strong></p>\n\n<p>Creates a recipe [jQuery.Model model] that is used\nto create, retrieve, updated, and delete \nrecipes on the server.</p>\n\n<p><strong>recipe_test.js</strong></p>\n\n<p>Tests the recipe model.</p>\n\n<p><strong>fixtures.js</strong></p>\n\n<p>The generator added code to simulate the Recipe Model's Ajax\nrequests (You might not have a Recipe service).</p>\n\n<p><strong>recipe/create</strong></p>\n\n<p>This folder contains the code, demo page, and tests for a\nwidget that creates Recipes.</p>\n\n<p><strong>recipe/list</strong></p>\n\n<p>This folder contains the code, demo page, and tests for a\nwidget that lists recipes.</p>\n\n<p><strong>(steal added)</strong></p>\n\n<p>The generator will also list files that \nsay \"(steal added)\". For example:</p>\n\n<pre><code class='text'>cookbook/models/models.js (steal added)</code></pre>\n\n<p>The \"(steal added)\" means the generator is \nadding a steal call to load\na generated file for you.  For example, \n<code>cookbook/models/models.js</code> now steals your\n<code>recipe.js</code> model like:</p>\n\n<pre><code>steal('./recipe.js')\n</code></pre>\n\n<h2>Page Setup</h2>\n\n<p>After the generator runs, your application file (<code>cookbook.js</code>)\nlooks like:</p>\n\n<pre><code>steal(\n    './cookbook.css',           // application CSS file\n    './models/models.js',       // steals all your models\n    './fixtures/fixtures.js',   // sets up fixtures for your models\n    'cookbook/create',\n    'cookbook/list',\n    function(){                 // configure your application\n\n        $('#recipes').cookbook_recipe_list();\n        $('#create').cookbook_recipe_create();\n})\n</code></pre>\n\n<p>You'll notice that it now loads <code>cookbook/create</code>\nand <code>cookbook/list</code> and then tries to add these widgets to the\n<code>#recipes</code> and <code>#create</code> elements.  </p>\n\n<p>However, <code>#recipes</code> and <code>#create</code> elements do not \nexist.  All we have to do now is add them.  Open <strong>cookbook/cookbook.html</strong>\nand add a <code>#recipes</code> <strong>ul</strong> a and <code>#create</code> <strong>form</strong>\nso it looks like:</p>\n\n<pre><code class='html'>&lt;!DOCTYPE HTML>\n&lt;html lang=\"en\">\n    &lt;head>\n        &lt;title>cookbook&lt;/title>\n    &lt;/head>\n    &lt;body>\n        &lt;h1>Recipes&lt;/h1>\n        &lt;ul id='recipes'>&lt;/ul>\n        &lt;form id='create' action=''>&lt;/form>\n        &lt;script type='text/javascript' \n                src='../steal/steal.js?cookbook'>    \n        &lt;/script>\n    &lt;/body>\n&lt;/html></code></pre>\n\n<h2>Run Cookbook</h2>\n\n<p>That's it. You've created a simple Cookbook \napplication. Open cookbook/cookbook.html in a browser. </p>\n\n<p><img src='http://wiki.javascriptmvc.com/wiki/images/c/c8/Cookbook.png'/></p>\n\n<div style='background-color: #dddddd;  margin: 20px 0px;padding: 20px'>\n<p>\n<b style='color:red'>NOTICE:</b> \nIf you are having problems and \nusing Chrome from the filesystem, it's because Chrome has an\n[http://code.google.com/p/chromium/issues/detail?id=47416 insanely restrictive AJAX policies on the filesystem].\n</p>\n<p>\nEssentially, Chrome does not allow AJAX requests to\nfiles outside the html page's folder.  JavaScriptMVC\norganizes your files into separate folders.\n</p>\n<p>\nTo fix this, just run JavaScriptMVC from a web server.\nOr, you can use another browser.  Or you can add\n<code>--allow-file-access-from-files</code> to Chrome's start script.\n</p>\n<p>\nIf you're annoyed like we are, \n[http://code.google.com/p/chromium/issues/detail?id=47416 star the issue]\nand let \ngoogle know you'd like Chrome to work on the filesystem!\n</p>\n</div>\n\n<p>Continue to [testing Testing Cookbook] or continue to read how\nthis code works.</p>\n\n<h2>How it Works</h2>\n\n<p>The Cookbook application can be broken into 5 parts:</p>\n\n<ul>\n<li>The Recipe Model</li>\n<li>The Recipe Fixture</li>\n<li>The Recipe Create control</li>\n<li>The Recipe List control</li>\n<li>The Cookbook application that puts it all together</li>\n</ul>\n\n<h3>The Recipe Model and Fixture</h3>\n\n<p><code>cookbook/models/recipe.js</code> looks like:</p>\n\n<pre><code>steal('jquery/model', function(){\n\n  $.Model('Cookbook.Models.Recipe',\n  {\n    findAll: \"/recipes.json\",\n      findOne : \"/recipes/{id}.json\", \n      create : \"/recipes.json\",\n     update : \"/recipes/{id}.json\",\n      destroy : \"/recipes/{id}.json\"\n  },\n  {});\n})\n</code></pre>\n\n<p>This loads [jQuery.Model $.Model] and uses it to create a \n<code>Cookbook.Models.Recipe</code> class.  This class lets us\ncreate, retrieve, update, and delete models programmatically like:</p>\n\n<p><strong>create</strong></p>\n\n<p>// create a recipe instance\n  var recipe = new Cookbook.Models.Recipe({\n    name: 'Hot Dog',\n    description: 'nuke dog, put in bun'\n  })</p>\n\n<p>// call save to create on the server\n  recipe.save()</p>\n\n<p><strong>retrieve</strong></p>\n\n<p>// get recipes from the server\n  Cookbook.Models.Recipe.findAll({}, function(recipes){\n    // do something with recipes\n  })</p>\n\n<p><strong>update</strong></p>\n\n<p>// update the properties of a created recipe\n  recipe.attrs({\n    name: 'Bratwurst',\n    description: 'nuke bratwurst, put in bun'\n  });</p>\n\n<p>// call save to send updates to the server\n  recipe.save()</p>\n\n<p><strong>delete</strong></p>\n\n<p>// call destroy\n  recipe.destroy()</p>\n\n<p>Of course, we don't have a server to make requests to.  This is\nwhere fixtures come in.</p>\n\n<h3>The Recipe Fixture</h3>\n\n<p>[jQuery.fixture Fixtures] intercept Ajax requests and \nsimulate the response. They are a great tool that enables\nyou to start work on the front end without a ready server.</p>\n\n<p>Open <code>cookbook/fixtures/fixtures.js</code> and you will find:</p>\n\n<pre><code>$.fixture.make(\"recipe\", 5, function(i, recipe){\n    var descriptions = [\"grill fish\", \"make ice\", \"cut onions\"]\n    return {\n        name: \"recipe \"+i,\n        description: $.fixture.rand( descriptions , 1)\n    }\n})\n</code></pre>\n\n<p>The scaffold generator added this to simulate a server \nwith 5 recipes.  Read more about how this works on\n[jQuery.fixture.make make's documentation page].</p>\n\n<h3>The Recipe Create Control</h3>\n\n<p>Open <code>cookbook/recipe/create/create.html</code> in your \nbrowser.  This page demos the Cookbook.Recipe.Create control and\nlets you create recipes.  It lets us work on Cookbook.Recipe.Create\nindependent of the rest of the application.</p>\n\n<p>Open <code>cookbook/recipe/create/create.js</code> to\nsee the Cookbook.Recipe.Create control's code:</p>\n\n<p>steal( 'jquery/controller',\n       'jquery/view/ejs',\n       'jquery/dom/form_params',\n       'jquery/controller/view',\n       'cookbook/models' )\n    .then('./views/init.ejs', function($){</p>\n\n<p>$.Controller('Cookbook.Recipe.Create',\n{\n    init : function(){\n        this.element.html(this.view());\n    },\n    submit : function(el, ev){\n        ev.preventDefault();\n        this.element.find('[type=submit]').val('Creating...')\n        new Cookbook.Models.Recipe(el.formParams()).save(this.callback('saved'));\n    },\n    saved : function(){\n        this.element.find('[type=submit]').val('Create');\n        this.element[0].reset()\n    }\n})</p>\n\n<p>});</p>\n\n<p>This code uses [steal] to load dependencies and then creates a \n<code>Cookbook.Recipe.Create</code> controller.  This creates\na <code>cookbook<em>recipe</em>create</code> jQuery helper function that\ncan be called on a form element like:</p>\n\n<pre><code>$('form#create').cookbook_recipe_create()\n</code></pre>\n\n<p>When the jQuery plugin is called, the controller's <code>init</code>\nmethod is called and runs </p>\n\n<pre><code>this.element.html(this.view());\n</code></pre>\n\n<p>This code renders the template at <code>cookbook/recipe/create/views/init.ejs</code>\ninto the controller's [jQuery.Controller.prototype.element element].</p>\n\n<p>When the jQuery plugin is called controller also binds event handlers on the\ncontroller's element.  In this case, it listens for \"submit\" events on the element.</p>\n\n<p>When a submit event happens, it updates the submit button's text, then creates\na new recipe.</p>\n\n<h3>The Recipe List Control</h3>\n\n<p>Open <code>cookbook/recipe/create/create.html</code> in your \nbrowser.  This page demos the Cookbook.Recipe.List control. It loads\nRecipes from the server, lets you delete recipes, and it also \nlistens for recipes being created and adds them to the list.</p>\n\n<p>Open <code>cookbook/recipe/list/list.js</code> to\nsee the Cookbook.Recipe.Create control's code:</p>\n\n<pre><code>$.Controller('Cookbook.Recipe.List',\n{\n  init : function(){\n    this.element.html(this.view('init',Cookbook.Models.Recipe.findAll()) )\n  },\n  '.destroy click': function( el ){\n    if(confirm(\"Are you sure you want to destroy?\")){\n      el.closest('.recipe').model().destroy();\n    }\n  },\n  \"{Cookbook.Models.Recipe} destroyed\" : function(Recipe, ev, recipe) {\n    recipe.elements(this.element).remove();\n  },\n  \"{Cookbook.Models.Recipe} created\" : function(Recipe, ev, recipe){\n    this.element.append(this.view('init', [recipe]))\n  },\n  \"{Cookbook.Models.Recipe} updated\" : function(Recipe, ev, recipe){\n      recipe.elements(this.element)\n          .html(this.view('recipe', recipe) );\n  }\n});\n</code></pre>\n\n<p>When the List control is added to the page, <code>init</code> is called:</p>\n\n<pre><code>this.element.html(this.view('init',Cookbook.Models.Recipe.findAll()) )\n</code></pre>\n\n<p>This beautiful one-liner does 4 things:</p>\n\n<ul>\n<li>Requests recipes from the server</li>\n<li>Loads the <code>cookbook/recipe/list/views/init.ejs</code> template</li>\n<li>When both recipes and the template have loaded, renders it</li>\n<li>Inserts the result into the list element</li>\n</ul>\n\n<p><code>init.ejs</code> looks like:</p>\n\n<pre><code class='html'>&lt;%for(var i = 0; i &lt; this.length ; i++){ %>\n    &lt;li &lt;%= this[i]%> >\n        &lt;%== $.View('//cookbook/recipe/list/views/recipe.ejs', this[i] )%>\n    &lt;/li>\n&lt;%}%></code></pre>\n\n<p>This iterates through the recipes retrieved from the server.  For each\nrecipe, it creates an LI element and renders the <code>recipe.ejs</code>\nsub-template.</p>\n\n<p>Notice that the view 'adds' each recipe instance to its LI element with:</p>\n\n<pre><code class='javascript'>&lt;%= this[i]%></code></pre>\n\n<p>This adds the model to jQuery.data and sets a 'recipe' className on the \nLI element.  We'll make use of this in a moment.</p>\n\n<p><strong>Destroying Recipes</strong></p>\n\n<p>Each recipe has a destroy link.  When it is clicked on the list's\n<code>'.destroy click'</code> method is called:</p>\n\n<pre><code>if(confirm(\"Are you sure you want to destroy?\")){\n  el.closest('.recipe').model().destroy();\n}\n</code></pre>\n\n<p>This method checks if you want to destroy the method.  If you do,\nit finds the parent 'recipe' element and gets back the model instance (that's\nin jQuery.data).  It then calls [jQuery.Model.prototype.destroy model's destroy] method.</p>\n\n<p>When a model is destroyed, it creates a <code>destroyed</code> event.  The List control \nlistens to these events with:</p>\n\n<pre><code>\"{Cookbook.Models.Recipe} destroyed\" : function(Recipe, ev, recipe) {\n  recipe.elements(this.element).remove();\n}\n</code></pre>\n\n<p>So, when a destroyed event happens, the List controller will look for [jQuery.fn.elements elements] that\nhave the recipe in jQuery.data and then remove them.</p>\n\n<p><strong>Creating Recipes</strong></p>\n\n<p>When a recipe is created, a \"created\" event is triggered.  The List control listens for this\nwith:</p>\n\n<pre><code>\"{Cookbook.Models.Recipe} created\" : function(Recipe, ev, recipe){\n  this.element.append(this.view('init', [recipe]))\n}\n</code></pre>\n\n<p>So, when a recipe is created, it will render the init view with the recipe and append the\nresult to the recipe element.</p>\n\n<p><strong>Updating Recipes</strong></p>\n\n<p>When a recipe is updated, an \"updated\" event is triggered. The List control listens for this\nwith:</p>\n\n<pre><code>\"{Cookbook.Models.Recipe} updated\" : function(Recipe, ev, recipe){\n  recipe.elements(this.element)\n        .html(this.view('recipe', recipe) );\n}\n</code></pre>\n\n<p>So, when a recipe is updated, List will update that element's html.</p>\n\n<h3>Putting it all Together</h3>\n\n<p>The cookbook application loads both of these widgets and adds them to the page.\nWhen Cookbook.Recipe.Create creates a Recipe, it creates a 'created' event which\nCookbook.Recipe.List listens for and adds that newly created recipe to its list\nof recipes.</p>\n\n<h2>Adding an \"is tasty\" column</h2>\n\n<p>In <code>cookbook/views/recipe/init.ejs</code> \nadd a <b>th</b> like this:</p>\n\n<pre><code class='html'>&lt;% for(var attr in Cookbook.Models.Recipe.attributes){%>\n    &lt;% if(attr == 'id') continue;%>\n    &lt;th><%= attr%> &lt;/th>    \n&lt;%}%>\n<u><b>&lt;th>Tasty?&lt;/th></b></u>\n&lt;th>Options&lt;/th></code></pre>\n\n<p>In <code>cookbook/views/recipe/show.ejs</code> add a <b>td</b> like this:</p>\n\n<pre><code class='html'>&lt;%for(var attribute in this.Class.attributes){%>\n    &lt;%if(attribute == 'id') continue;%>\n    &lt;td class='&lt;%= attribute%>'>\n            &lt;%=this[attribute]%>\n    &lt;/td>\n&lt;%}%>\n<u><b>&lt;td>&lt;%= this.isTasty() %>&lt;/td></b></u>\n&lt;td>\n    &lt;a href='javascript: void(0)' class='edit'>edit&lt;/a>\n    &lt;a href='javascript: void(0)' class='destroy'>destroy&lt;/a>\n&lt;/td></code></pre>\n\n<p>Reload your page.  You should see the \nTasty column.  Add a recipe with mushrooms\nand Tasty? should be false.</p>\n\n<p>Continue to [testing Testing Cookbook].</p>", "title": "Creating Cookbook", "parents": ["getstarted"], "order": 0, "src": "tutorials/getstarted/creating.md", "children": []})