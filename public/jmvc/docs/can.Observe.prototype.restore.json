c({"name": "can.Observe.prototype.restore", "params": {"restoreAssociations": {"description": "", "type": "", "optional": false, "order": 0, "name": "restoreAssociations"}, "deep": {"order": 1, "description": "<p>Whether nested objects should also\nbe checked and restored or not. Defaults to false.</p>", "name": "deep", "type": "Boolean", "optional": true}}, "ret": {"description": "<p>The observe instance</p>", "type": "can.Observe"}, "type": "function", "comment": "<p>Restores the observe to the state of the last time\n[can.Observe.prototype.backup] was called if [can.Observe.prototype.isDirty]\nreturns true. If you pass true, restore will also restore all nested properties\nand [can.Model] associations.</p>\n\n<pre><code> var recipe = new can.Observe({\n     name : 'Pancakes',\n     ingredients : [{\n         name : \"eggs\",\n         amount : '1'\n     }, {\n         name : \"flour\",\n         amount : '1 cup'\n     }, {\n         name : \"milk\",\n         amount : '1 1/4 cup'\n     }]});\n\n     recipe.backup();\n\n     // Change the attribute of a nested observe\n     recipe.attr('ingredients')[0].attr('amount', '2');\n     recipe.attr('name', 'Eggcakes');\n     recipe.attr('name') // -&gt; Eggcakes\n     recipe.attr('ingredients')[0].attr('amount') // -&gt; 2\n     recipe.restore(true);\n     recipe.attr('name') // -&gt; Pancakes\n     recipe.attr('ingredients')[0].attr('amount') // -&gt; 1\n</code></pre>", "parents": ["can.Observe.backup"], "src": "can/observe/backup/backup.js", "line": 92, "children": []})