c({"name": "can.Construct.proxy", "type": "page", "comment": "<p>Proxy takes a function name and returns a new function that\nwill always have the same context from which it was created.\nThis is useful for creating callback functions that have 'this' \nset correctly.</p>\n\n<pre><code>var MyClass = can.Construct({\n    getData: function() {\n        this.showing = null;\n        $.get('data.json',\n              this.proxy('gotData'),\n              'json')\n    },\n    gotData: function( data ) {\n        this.showing = data;\n    }\n},{});\n</code></pre>\n\n<p>In the above example when we do <strong>$.get</strong>, the <strong>gotData</strong> function\nwill execute when the AJAX data request is completed and\ninvoke <strong>gotData</strong> with the 'this' context of the construct rather\nthan the window.</p>\n\n<h2>Currying Arguments</h2>\n\n<p>You can pass additional arguments to the proxy and it will \nfill in arguments on the returning function.  When invoked,\nthe additional arguments will appear first in the methods\nparameters followed by the callback's arguments.</p>\n\n<pre><code>var MyClass = can.Construct({\n    getData: function(callback) {\n        $.get('data.json',\n              this.proxy('process', callback),\n              'json');\n    },\n    process: function(callback, jsonData ) {\n        //callback is added as first argument\n        jsonData.processed = true;\n        callback(jsonData);\n    }\n},{});\n</code></pre>\n\n<h2>Piping Functions</h2>\n\n<p>Proxy can take an array of functions to call as \nthe first argument.  When the returned callback function\nis called each function in the array is passed the return \nvalue of the prior function.  This is often used\nto eliminate currying initial arguments.</p>\n\n<pre><code>var MyClass = can.Construct({\n    getData: function( callback ) {\n        //calls process, then callback with value from process\n        $.get('data.json',\n              this.proxy(['process2',callback]),\n              'json') \n    },\n    process2: function( type,jsonData ) {\n        jsonData.processed = true;\n        return [jsonData];\n    }\n},{});\n\nMyClass.getData(showDataFunc);\n</code></pre>", "parents": ["can.Construct"], "plugin": "can/construct/proxy", "test": "can/construct/proxy/qunit.html", "download": "http://jmvcsite.heroku.com/pluginify?plugins[]=can/construct/proxy/proxy.js", "src": "can/construct/proxy/proxy.md", "children": []})