c({"name": "can.view.render", "params": {"view": {"description": "<p>the path of the view template or a view object</p>", "type": "String|Object", "optional": false, "order": 0, "name": "view"}, "data": {"description": "<p>the object passed to a template</p>", "type": "Object", "optional": false, "order": 1, "name": "data"}, "helpers": {"description": "<p>additional helper methods to be passed to the view template</p>", "type": "Object", "optional": true, "order": 2, "name": "helpers"}, "callback": {"description": "<p>function executed after template has been processed</p>", "type": "Function", "optional": false, "order": 3, "name": "callback"}, "returns": {"order": 4, "description": "<p>a string of processed text or a deferred that resolves to the processed text</p>", "name": "returns", "type": "String|Object", "optional": false}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["can.view"], "comment": "<p><code>can.view.render(view, data, [helpers], callback)</code> Returns the rendered markup produced by the corresponding template\nengine. If you pass a deferred object in as data, render returns\na deferred resolving to the rendered markup.</p>\n\n<h2>Example</h2>\n\n<pre><code>can.view.render(\"//views/myview.ejs\", {\n  count: 0\n},\nfunction(result) {\n  //do something with result\n}\n</code></pre>", "src": "can/view/view.js", "line": 180, "children": []})