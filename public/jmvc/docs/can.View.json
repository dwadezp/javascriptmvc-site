c({"name": "can.view", "type": "class", "comment": "<p>Render tempaltes into a documentFragement.  A platform for retrieving those fragements\nand inserting them into the dom.</p>\n\n<p>Live binding ....</p>\n\n<pre><code>can.view(\"//path/to/template\",{data}) //-&gt; documentFragement\n</code></pre>\n\n<p>EJS + Observe</p>\n\n<p>EJS knows when you read an observe property with the attr method.  It then sets\nitself up to replace the content anytime the EJS file is rendered.</p>\n\n<p>Examples:</p>\n\n<p>INPUT VALUE</p>\n\n<p>template:</p>\n\n<pre><code>John is &lt;input value='&lt;%= person.attr('age') %&gt;'/&gt; years old\n\njohn = new can.Observe({age: 29})\nform.appendChild( can.view('person.ejs', {person: john}) )\n</code></pre>\n\n<p>Escaped HTML</p>\n\n<p>template:</p>\n\n<pre><code>&lt;div&gt;My favorite HTML tag is: &lt;%= favorites.attr('tag')%&gt;&lt;/div&gt;\n\nfavorites = new can.Observe({tag: \"&lt;div&gt;\"})\nfavs.appendChild( can.view('favs.ejs', {favorites: favorites}) )\n</code></pre>\n\n<p>Unescaped HTML</p>\n\n<pre><code>&lt;div&gt;My favorite HTML tag shows up like: &lt;%== favorites.attr('tag')%&gt;&lt;/div&gt;\n\nfavorites = new can.Observe({tag: \"&lt;b&gt;this&lt;/b&gt;\"})\nfavs.appendChild( can.view('favs.ejs', {favorites: favorites}) )\n</code></pre>\n\n<p>Tag properties</p>\n\n<pre><code>&lt;input type='checkbox' &lt;%= task.attr('complete') ? 'checked' : \"\" %&gt;/&gt;\n\nfavorites = new can.Observe({tag: \"&lt;b&gt;this&lt;/b&gt;\"})\nfavs.appendChild( can.view('favs.ejs', {favorites: favorites}) )\n</code></pre>\n\n<p>Conditional Blocks</p>\n\n<pre><code>if() {\n\n} else {\n\n}\n</code></pre>\n\n<p>Iterative Blocks</p>\n\n<pre><code>// make sure your block listens on length, but the block \npart can be re-called\n\nproblem example\n\n&lt;% for(var i =0 ; i &lt; todos.attr('length'); i++) { %&gt;\n  &lt;li class='&lt;%= todos[i].attr('completed') ? 'complete' : '' %&gt;'&gt; .... &lt;/li&gt;\n&lt;% } %&gt;\n</code></pre>\n\n<p>This does not work if a todo's completed attr is updated because i will not be the index\nof the todo when \"todos[i].attr('completed') ? 'complete' : ''\" is reevaluated.</p>\n\n<p>To fix this, make sure each iteration of the block gets a referece to the instance it's working on.\nEJS has a list helper method that does just this.</p>", "parents": ["index"], "src": "can/view/view.md", "children": []})