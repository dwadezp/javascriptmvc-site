c({"name": "can.Construct.super", "type": "page", "comment": "<p>Allows you to call the base function via a <code>_super</code> attribute. Given a simple Todo construct:</p>\n\n<pre><code>var Todo = can.Construct({\n    init : function(text) {\n        this.text = text;\n    },\n    toString : function() {\n        return 'TODO: ' + this.text;\n    }\n});\n\nvar todo = new Todo('Take out trash');\nconsole.log(trash.toString()); // -&gt; TODO: Take out trash\n</code></pre>\n\n<p>Using the <em>super</em> plugin you can create an extended version of this Todo construct and in each method\nbe able to access the overwritten method using <code>this._super</code> (if there is one):</p>\n\n<pre><code>var BetterTodo = Todo({\n    init : function(text, status) {\n        this._super(text);\n        this.status = status || 'Not done';\n    },\n\n    toString : function() {\n        return '[' + this.status + ']: ' + this._super();\n    }\n});\n\nvar betterTodo = new BetterTodo('Take out trash', 'Done');\nconsole.log(newTrash.toString());\n// -&gt; [Done] TODO: Take out trash\n</code></pre>\n\n<p>If you want to pass all arguments to <code>_super</code> use\n<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\">apply</a>:</p>\n\n<pre><code>var EvenBetterTodo = BetterTodo({\n    init : function(text, status) {\n        this._super.apply(this, arguments);\n        this.isEvenbetter = true;\n    }\n});\n</code></pre>\n\n<p>*Note: Its important to include this plugin before you include other plugins that \nextend Observe so that prototype chain is extended correctly.</p>", "parents": ["can.Construct"], "src": "can/construct/super/super.md", "children": []})