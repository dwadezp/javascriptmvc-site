C({"name": "jquery.controller.history", "type": "page", "comment": "<p>The jquery/controller/history plugin adds \nbrowser hash (#) based history support.</p>\n\n<p>It allows you to listen to hashchange events with OpenAjax.hub.  </p>\n\n<p>Typically you subscribe to a history event in your controllers:</p>\n\n<pre><code>$.Controller(\"MyHistory\",{\n  \"history.pagename subscribe\" : function(called, data){\n    //called when hash = #pagename\n  }\n})\n</code></pre>\n\n<h2>Event Names</h2>\n\n<p>When a history event happens, an OpenAjax message is produced that \nstarts with \"history.\".  The remainder of the message name depends on the \nvalue of the \"hash\".  </p>\n\n<p>The following shows hash values and \nthe corresponding published message and data.</p>\n\n<pre><code>\"#foo=bar\" -&gt; \"history.index\" {foo: bar}\n\"#foo/bar\" -&gt; \"history.foo.bar\" {}\n\"#foo&amp;bar=baz\" -&gt; \"history.foo\" {bar: baz}\n</code></pre>\n\n<p>Essentially, if the hash starts with something like #foo/bar, this gets\nadded to the message name as \"foo.bar\".  Once \"&amp;\" is found, it adds the remainder\nas name-value pairs to the message data.</p>\n\n<h2>Controller Helper Functions</h2>\n\n<p>The methods on the left are added to Controller.prototype and make it easier to \nmake changes to history.</p>", "title": "History Events", "parents": ["jQuery.Controller"], "plugin": "jquery/controller/history", "src": "../jquery/controller/history/history.js", "children": ["jQuery.Controller.prototype.redirectTo", "jQuery.Controller.prototype.replaceWith", "jQuery.Controller.prototype.historyAdd", "jQuery.Controller.prototype._get_history_point", "jQuery.Controller.prototype.pathData"]})