c({"name": "can.Control.plugin", "type": "page", "comment": "<p>The <code>can.Control.plugin</code> extension creates a plugin for the control in the \njQuery NodeList using the control's [can.Construct.fullName fullName] or\na static [can.Control.plugin.static.pluginName pluginName] attribute. For example, if you create the following control:</p>\n\n<pre><code>var Tabs = can.Control({\n    pluginName : 'tabs'\n},{\n    init : function(element, options, arg1){ },\n    update : function(options) {}\n})\n</code></pre>\n\n<p>With jQuery, you can create the control direct on a jQuery collection like:</p>\n\n<pre><code>$(\".tabs\").tabs();\n</code></pre>\n\n<p><strong>Note:</strong> This plugin only supports jQuery.</p>\n\n<h2>Invoking Methods</h2>\n\n<p>You can invoke methods on a controller instance after its created through a few\ndifferent approaches.  </p>\n\n<p>Once a controller is initialized on a DOM element, you can invoke a method by calling\nthe plugin with the method name followed by the parameters for that method.</p>\n\n<pre><code>var MyTodo = can.Control({\n    pluginName : 'my_toto'\n}, {\n    create: function(name, task){\n        this.element.append(name + \" \" + task)\n    }\n});\n\n$('.my_todo').my_todo(\"create\", 'Brian', 'Sweep garage');\n</code></pre>\n\n<p>Keep in mind that this approach follows the jQuery plugin convention and returns a jQuery object,\nnot the methods return value. </p>\n\n<p>You can also retrieve the control instance and invoke the method directly.</p>\n\n<pre><code>var control = $('.my_todo').control();\ncontrol.create('Brian', 'Sweep garage');\n</code></pre>\n\n<p>For more information on this, see [can.Control.prototype.control] or [can.Control.prototype.controls].</p>\n\n<h2>Demo</h2>\n\n<p>The following demo shows creating a plugin widget and then updating the widget's <code>times</code> variable\nfor each time the button was clicked.</p>\n\n<div class='demo_wrapper' data-demo-src='can/control/plugin/plugin.html'></div>", "parents": ["can.Control"], "plugin": "can/control/plugin", "test": "can/control/plugin/qunit.html", "download": "http://donejs.com/can/dist/can.control.plugin.js", "src": "can/control/plugin/plugin.md", "children": []})