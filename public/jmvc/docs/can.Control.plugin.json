c({"name": "can.Control.plugin", "type": "page", "comment": "<p>The can.Control <strong>plugin</strong> extension creates a plugin for the control in the \nbase-library's NodeList using the control's [fullName can.Construct.fullName] or\na static pluginName attribute. For example,\nif you create the following control:</p>\n\n<pre><code>var Tabs = can.Control({\n  pluginName : \"tabs\"\n},{\n  init : function(element, options, arg1){\n\n  },\n  update : function(options) {\n\n  }\n})\n</code></pre>\n\n<p>With jQuery, you can create the control direct on a jQuery collection like:</p>\n\n<pre><code>$(\".tabs\").tabs();\n</code></pre>\n\n<p><strong>Note:</strong> This plugin only supports jQuery.</p>\n\n<h2>Creating</h2>\n\n<p>Show how to create an instance, how arguments are passed.  How an instance\nwill be created on each object.</p>\n\n<h2>Updating</h2>\n\n<p>Talk about the update method.  How options are passed to it.</p>\n\n<h2>Calling methods</h2>\n\n<p>Talk about calling methods</p>\n\n<h2>Access</h2>\n\n<p>Talk about how the control instances are stored in can.Data.  How they\ncan be retrieved with control or controls.  </p>", "parents": ["can.Control"], "src": "can/control/plugin/plugin.md", "children": []})