c({"name": "can.String", "type": "class", "comment": "<p>A collection of useful string helpers. Available helpers are:</p>\n\n<ul>\n  <li>[can.util.String.capitalize|capitalize]: Capitalizes a string (some_string &raquo; Some_string)</li>\n  <li>[can.util.String.camelize|camelize]: Capitalizes a string from something undercored \n      (some_string &raquo; someString, some-string &raquo; someString)</li>\n  <li>[can.util.String.classize|classize]: Like [can.util.String.camelize|camelize], \n      but the first part is also capitalized (some_string &raquo; SomeString)</li>\n  <li>[can.util.String.niceName|niceName]: Like [can.util.String.classize|classize], but a space separates each 'word' (some_string &raquo; Some String)</li>\n  <li>[can.util.String.underscore|underscore]: Underscores a string (SomeString &raquo; some_string)</li>\n  <li>[can.util.String.sub|sub]: Returns a string with {param} replaced values from data.\n      <code><pre>\n      can.String.sub(\"foo {bar}\",{bar: \"far\"})\n      //-> \"foo far\"</pre></code>\n  </li>\n</ul>", "parents": ["can.util"], "src": "can/util/string/deparam/deparam.js", "line": 9, "children": ["can.String.getObject", "can.String.capitalize", "can.String.underscore", "can.String.sub", "can.String.deparam"]})