C({"name": "getstarted", "type": "page", "comment": "<p>This guide introduces the most important aspects of JavaScriptMVC (JMVC) by \ncreating a simple cookbook application.  There's also a [rapidstart Rapid Start] if \nyou want a few quick how-tos.  Or for an in depth example, \nread [http://jupiterjs.com/news/organizing-a-jquery-application Organizing a jQuery Application].</p>\n\n<h2>The Video</h2>\n\n<p><a href='http://cdn.javascriptmvc.com/videos/2_0/2_0_demo.htm' id='video' class='big_button floatLeft'>\n     <span>Watch</span>\n     <span class='label'>2.0 Video</span>\n </a>  Check out the <a href='http://javascriptmvc.s3.amazonaws.com/videos/2_0/2_0_demo.htm'>\n JavaScriptMVC 2.0</a> video that walks you through much of the getting started guide. <br />\n It's an older treatment, but still touches on JMVC's strong points.</p>\n\n<h2 class='spaced'>Basics</h2>\n\n<p>Before jumping in, there are some things you should know:</p>\n\n<h3>Purpose</h3>\n\n<p>JavaScriptMVC is for client side JavaScript development.  JavaScriptMVC is our way\nof making quality, maintainable applications in the shortest amount of time.</p>\n\n<h3>Folder Structure</h3>\n\n<p>JMVC logically separates a basic app into following folder structure:</p>\n\n<pre><code class='javascript'>appname            - your app files\n    \\controllers   - organized event handlers\n    \\models        - manage data\n    \\resources     - helper scripts\n    \\test          - test files\n        \\funcunit  - funcunit tests\n        \\qunit     - qunit tests\n    \\views         - html templates\ndocumentjs         - documentation engine\nfuncunit           - testing tool\njquery             - jquery and jQuery plugins (like $.Controller)\nsteal              - compression and build</code></pre>\n\n<div class='whisper'>P.S. Don't worry about creating an 'appname' folder yet.  We'll do that in a second.</div>\n\n<h3>Sub Projects</h3>\n\n<p>JavaScriptMVC is comprised of 4 sub projects:</p>\n\n<ul>\n<li>[DocumentJS] - A documentation engine</li>\n<li>[FuncUnit] - A web testing framework</li>\n<li>jQueryMX - jQuery MVC eXtensions.</li>\n<li>[stealjs StealJS] - A code manager : dependency management, code cleaning, building, etc.</li>\n</ul>\n\n<h3>Plugins</h3>\n\n<p>Everything is a plugin.  Just [steal.static.plugins steal] the ones you need. \nPlugins load their own dependencies and won't load duplicate files.  It looks like:</p>\n\n<pre><code class='javascript'>steal.plugins('jquery/model',\n  'jquery/view',\n  'jquery/controller');</code></pre>\n\n<div class='whisper'>\n  P.S. <code>steal.plugins('a/b')</code> adds <code>a/b/b.js</code>\n to your project. </div>\n\n<h2>License</h2>\n\n<p>JavaScriptMVC is MIT with the following exceptions:</p>\n\n<ul>\n<li>[http://www.mozilla.org/rhino/ Rhino] - JS command line ([http://www.mozilla.org/MPL/ MPL] 1.1)</li>\n<li>[http://seleniumhq.org/ Selenium] - Browser Automation ([http://www.apache.org/licenses/LICENSE-2.0 Apache 2])</li>\n</ul>\n\n<p>These exceptions, although permissive licenses themselves, are not linked in your final production build.</p>\n\n<h2>Making a Cookbook</h2>\n\n<p>Lets get started by [install installing JavaScriptMVC].</p>", "title": "Getting Started", "src": "jmvc/pages/getstarted/getstarted.md", "children": ["install", "testing"]})