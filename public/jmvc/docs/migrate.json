c({"name": "migrate", "type": "page", "comment": "<p>There are many new feature in JavaScriptMVC 3.2 that help you build great JavaScript applications.\nAlthough 3.2 is not strictly backwards compatible it is possible to upgrade from\nand earlier version. This guide outlines the things you have to look at when upgrading from\nversion 3.0 or 3.1.</p>\n\n<h2>Steal</h2>\n\n<p>[stealjs | Steal] has experienced a major improvement, making it even easier to manage your dependencies.\nInstead of defining what you want to steal like <em>steal.plugins</em>, <em>steal.controllers</em> or <em>steal.views</em> you\njust steal the file and Steal will figure out what to do with it based on the extension.\nSo if your code used to look like this:</p>\n\n<pre><code>steal('helper').plugins('jquery/controller', 'jquery/view/ejs', 'jquery/controller/view').views('init.ejs')\n    .css('style').then(function($) {\n    $.Controller('Test.Controller', {}, {\n        init : function(el, ops)\n        {\n            this.element.html(this.view());\n        }\n    });\n});\n</code></pre>\n\n<p>The new Steal looks like this:</p>\n\n<pre><code>steal('./helper.js', 'jquery/controller', 'jquery/view/ejs', './views/init.ejs', './style.css', function($) {\n    $.Controller('Test.Controller', {}, {\n        init : function(el, ops)\n        {\n            this.element.html(this.view());\n        }\n    });\n});\n</code></pre>\n\n<p>The rules when stealing a file:</p>\n\n<ul>\n<li>./ refers to the path of the current file</li>\n<li>When stealing something without extension like <em>jquery/controller</em> Steal will first look for the plugin\nfile <em>jquery/controller/controller.js</em> and if not found <em>jquery/controller.js</em> based on your applications\nroot path</li>\n<li>./helper.js loads helper.js in the folder of the current file</li>\n<li>./views/init.ejs loads the init.ejs [jQuery.EJS | EJS view] from views subfolder in the current folder</li>\n<li>./style.css loads the style.css file in the current folder</li>\n</ul>\n\n<p>Note that the new Steal runs asynchronously so you might have to be more careful using <em>steal.then()</em>\nif there are dependencies that have to be loaded before another. This is also important when putting code\noutside of steal. Because jQuery hasn't been loaded you can not use the jQuery object. So instead of\n$(document).ready use this:</p>\n\n<pre><code>steal.then(function() {\n    $('body').my_plugin();\n});\n</code></pre>\n\n<h2>Organizing your application</h2>\n\n<p>Starting with version 3.1 and fully encouraged in 3.2 JavaScriptMVC follows a new approach in organizing your application structure.\nRead the complete guide on [organizing | organizing your app] to get an idea. For migrating from the old structure\nthe following things are important:</p>\n\n<ul>\n<li>The use of the <em>controllers</em> folder is discouraged. You still can use it but organizing each controller in\ntheir own folder with a views subfolder is the preferred way as it is a lot more obvious how your application\nis split up and easier to test.</li>\n<li>Models reside in their own folder as they might be application wide and not controller specific\n(e.g. a recipe model will be used in a recipe_edit and a recipe_list controller)</li>\n</ul>\n\n<h2>Document controllers</h2>\n\n<p>There are no document controllers in 3.2 anymore (controllers that used have the default option <em>{ onDocument : true }</em>).\nInstead initialize your controllers like any [jquery.controller.plugin | jQuery plugin] in the application file.\nFor document wide controllers initialize them on the document itself. \nAn example how your main application file may look like:</p>\n\n<pre><code>steal('my/controller', 'my/global/controller', function($) {\n    $(document).ready(function($) {\n        $(document).global_controller();\n        $('.thing').my_controlller();\n    });\n});\n</code></pre>\n\n<p>Note that unlike the old document controllers a global controller will not listen to a specific id.</p>\n\n<h2>Listening to model changes</h2>\n\n<p>The notifications via OpenAJAX have been dropped in favor of the [jQuery.Observe Observable] mechanism.\nCheck out the documentation on [jquery.model.events | Model events] for detailed information on how use it for Models. </p>\n\n<h2>Controller History</h2>\n\n<p>Controller history using OpenAjax has been removed in 3.2. Use [jQuery.route] for full history and routing support.</p>\n\n<h2>Wrap Removed</h2>\n\n<p>The AJAX response converter 'wrap' and 'wrapMany' have been removed in favor of a [native jQuery converter http://api.jquery.com/extending-ajax/#Converters].</p>\n\n<p>Before, you would do a <em>this.callback</em> on the success like:</p>\n\n<pre><code>findAll : function(params, success, error ){\n    return $.ajax({\n        url: '/services/recipes.json',\n        type: 'get',\n        data: params\n        dataType : 'json',\n        success: this.callback(['wrapMany',success])\n    });\n}\n</code></pre>\n\n<p>now becomes:</p>\n\n<pre><code>findAll : function(params, success, error ){\n    return $.ajax({\n        url: '/services/recipes.json',\n        type: 'get',\n        data: params\n        dataType : 'json recipe.models',\n        success: success\n        });\n    }\n</code></pre>\n\n<h2>Callback Renamed to Proxy</h2>\n\n<p>The <em>this.callback</em> method has been deprecated and the preferred method is now <em>this.proxy</em>.</p>\n\n<h2>steal.browser.rhino removed</h2>\n\n<p>The <em>steal.browser.rhino</em> has been removed. We are using <em>steal.browsers</em> namespace for the browser drivers.  If you were using this to have rhino skip files in the build process, you can now use: <em>steal.isRhino</em>.</p>", "title": "Upgrading to 3.2", "parents": ["tutorials"], "order": 8, "src": "tutorials/migrate.md", "children": []})