C({"name": "migrate", "type": "page", "comment": "<p>There are many new feature in JavaScriptMVC 3.2 that help you build great JavaScript applications.\nAlthough 3.2 is not strictly backwards compatible it is possible to upgrade from\nand earlier version. This guide outlines the things you have to look at when upgrading from\nversion 3.0 or 3.1.</p>\n\n<h2>Steal</h2>\n\n<p>[stealjs | Steal] has experienced a major improvement, making it even easier to manage your dependencies.\nInstead of defining what you want to steal like <em>steal.plugins</em>, <em>steal.controllers</em> or <em>steal.views</em> you\njust steal the file and Steal will figure out what to do with it based on the extension.\nSo if your code used to look like this:</p>\n\n<pre><code>steal('helper').plugins('jquery/controller', 'jquery/view/ejs', 'jquery/controller/view').views('init.ejs')\n    .css('style').then(function($) {\n    $.Controller('Test.Controller', {}, {\n        init : function(el, ops)\n        {\n            this.element.html(this.view());\n        }\n    });\n});\n</code></pre>\n\n<p>The new Steal looks like this:</p>\n\n<pre><code>steal('./helper.js', 'jquery/controller', 'jquery/view/ejs', './views/init.ejs', './style.css', function($) {\n    $.Controller('Test.Controller', {}, {\n        init : function(el, ops)\n        {\n            this.element.html(this.view());\n        }\n    });\n});\n</code></pre>\n\n<p>The rules when stealing a file:</p>\n\n<ul>\n<li>./ refers to the path of the current file</li>\n<li>When stealing something without extension like <em>jquery/controller</em> Steal will first look for the plugin\nfile <em>jquery/controller/controller.js</em> and if not found <em>jquery/controller.js</em> based on your applications\nroot path</li>\n<li>./helper.js loads helper.js in the folder of the current file</li>\n<li>./views/init.ejs loads the init.ejs [jQuery.EJS | EJS view] from views subfolder in the current folder</li>\n<li>./style.css loads the style.css file in the current folder</li>\n</ul>\n\n<p>Note that the new Steal runs asynchronously so you might have to be more careful using <em>steal.then()</em>\nif there are dependencies that have to be loaded before another.</p>\n\n<h2>Document controllers</h2>\n\n<p>There are no document controllers in 3.2 anymore (controllers that used have the default option <em>{ onDocument : true }</em>).\nInstead initialize your controllers like any [jquery.controller.plugin | jQuery plugin] in the application file.\nFor document wide controllers initialize them on the document itself. \nAn example how your main application file may look like:</p>\n\n<pre><code>steal('my/controller', 'my/global/controller', function($) {\n    $(document).ready(function($) {\n        $(document).global_controller();\n        $('.thing').my_controlller();\n    });\n});\n</code></pre>\n\n<p>Note that unlike the old document controllers a global controller will not listen to a specific id.</p>\n\n<h2>Listening to model and history changes</h2>\n\n<p>The notifications via Openajax have been dropped in favour of the Observable mechanism.</p>\n\n<h2>Controller History</h2>", "title": "Migrating from 3.0 and 3.1", "parents": ["tutorials"], "order": 6, "src": "tutorials/migrate.md", "children": []})