c({"name": "can.Observe.prototype.isDirty", "params": {"checkAssociations": {"description": "", "type": "", "optional": false, "order": 0, "name": "checkAssociations"}, "deep": {"order": 1, "description": "<p>Whether nested objects should be checked or\nnot. Defaults to false.</p>", "name": "deep", "type": "Boolean", "optional": true}}, "ret": {"description": "<p>true if there are changes,\n  false if not or there is no backup</p>", "type": "Boolean"}, "type": "function", "comment": "<p>Returns if the observe has changed since the last\n[can.Observe.prototype.backup] call. Will return\nfalse if there is no backup yet. If you pass true,\n<em>isDirty</em> also checks if any child properties or [can.Model]\nassociations have changed.</p>\n\n<pre><code>  var recipe = new can.Observe({\n      name : 'Pancakes',\n      ingredients : [{\n          name : \"eggs\",\n          amount : '1'\n      }, {\n          name : \"flour\",\n          amount : '1 cup'\n      }, {\n          name : \"milk\",\n          amount : '1 1/4 cup'\n      }]\n  });\n\n  recipe.backup();\n  // Change the attribute of a nested observe\n  recipe.attr('ingredients')[0].attr('amount', '2');\n  recipe.isDirty() // -&gt; false\n  recipe.isDirty(true) // -&gt; true\n  recipe.attr('name', 'Eggcakes');\n  recipe.isDirty() // -&gt; true\n</code></pre>", "plugin": "can/observe/backup", "parents": ["can.Observe.backup"], "src": "can/observe/backup/backup.js", "line": 44, "children": []})