c({"name": "can.Model.prototype.destroy", "params": {"success": {"description": "", "type": "", "optional": false, "order": 0, "name": "success"}, "error": {"description": "", "type": "", "optional": false, "order": 1, "name": "error"}, "[success(instance)": {"order": 2, "description": "<p>] called if a successful destroy</p>", "name": "[success(instance)", "type": "Function", "optional": false}, "[error(xhr)": {"order": 3, "description": "<p>] called if an unsuccessful destroy</p>", "name": "[error(xhr)", "type": "Function", "optional": false}}, "ret": {"description": "<p>a deferred that resolves with the destroyed instance</p>", "type": "can.Deferred"}, "type": "function", "parents": ["can.Model.prototype"], "comment": "<p>Destroys the instance by calling \n[Can.Model.destroy] with the id of the instance.</p>\n\n<pre><code>recipe.destroy(success, error);\n</code></pre>\n\n<p>This triggers \"destroyed\" events on the instance and the \nModel constructor function which can be listened to with\n[can.Model::bind] and [can.Model.bind]. </p>\n\n<pre><code>Recipe = can.Model({\n  destroy : \"DELETE /services/recipes/{id}\",\n  findOne : \"/services/recipes/{id}\"\n},{})\n\nRecipe.bind(\"destroyed\", function(){\n  console.log(\"a recipe destroyed\");    \n});\n\n// get a recipe\nRecipe.findOne({id: 5}, function(recipe){\n  recipe.bind(\"destroyed\", function(){\n    console.log(\"this recipe destroyed\")    \n  })\n  recipe.destroy();\n})\n</code></pre>", "src": "can/model/model.js", "line": 269, "children": []})