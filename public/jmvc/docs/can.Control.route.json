c({"name": "can.Control.route", "type": "page", "comment": "<p>The can.Control.route plugin adds a [can.route] processor to can.Control. This allows\ncreating routes and binding to <code>can.route</code> in a single step. For example:</p>\n\n<pre><code>var Router = can.Control({\n    init : function(el, options) {\n    },\n\n    \":type route\" : function(data) {\n        // the route says anything but todo\n    },\n\n    \"todo/:id route\" : function(data) {\n        // the route says\n    },\n\n    \"route\" : function(data){\n        setStatus(\"route\", data);\n    }\n});\n\nnew Router(window);\n</code></pre>\n\n<p>The plugin doesn't affect the way you usually use [can.route]. The above control for example can\nalso set some default values in its <em>init</em> method:</p>\n\n<pre><code>can.route(':type', { type : 'index' });\ncan.route('todo/:id', { id : 1 });\n</code></pre>\n\n<p>The following demo shows the control with these default settings in action.\nYou can edit the hash, follow some example links or directly change the can.route atttributes.\nAt the top it shows the control method being called and the data that are being passed to it:</p>\n\n<div class='iframe_wrapper' data-iframe-src='can/control/route/demo.html' data-iframe-height='600'></div>", "parents": ["can.Control"], "plugin": "can/control/route", "test": "can/control/view/qunit.html", "download": "http://donejs.com/can/dist/can.control.route.js", "src": "can/control/route/route.md", "children": []})