c({"name": "can.Control.route", "type": "page", "comment": "<p>The can.Control.route plugin adds a <strong>route</strong> [can.Control.static.processors processor] to [can.Control].\nThis allows creating routes and binding to [can.route] in a single step by listening to the <em>route</em> event\nand a route. Without a route, the event will be triggered when the route is empty.\nThe data passed to the event handler will contain the [can.route.deparam deparamed route] without the\n<em>route</em> attribute.</p>\n\n<p>For example:</p>\n\n<pre><code>var Router = can.Control({\n    init : function(el, options) {\n    },\n\n    \":type route\" : function(data) {\n        // the route says anything but todo\n    },\n\n    \"todo/:id route\" : function(data) {\n        // the route says todo/[id]\n        // data.id is the id or default value\n    },\n\n    \"route\" : function(data){\n        // route is empty\n    }\n});\n\nnew Router(window);\n</code></pre>\n\n<p>The plugin doesn't affect the way you usually use [can.route]. A control can, for example,\nalso set some default values in its <em>init</em> method:</p>\n\n<pre><code>init : function(element, options) {\n    can.route(':type', { type : 'index' });\n    can.route('todo/:id', { id : 1 });\n}\n</code></pre>\n\n<h2>Demo</h2>\n\n<p>The following demo shows the above control and default settings in action.\nYou can edit the hash, follow some example links or directly change the can.route atttributes.\nAt the top it shows the event handler, that is being called on the control, and the data passed to it:</p>\n\n<div class='iframe_wrapper' data-iframe-src='can/control/route/demo.html' data-iframe-height='600'></div>", "parents": ["can.Control"], "plugin": "can/control/route", "test": "can/control/view/qunit.html", "download": "http://donejs.com/can/dist/can.control.route.js", "src": "can/control/route/route.md", "children": []})