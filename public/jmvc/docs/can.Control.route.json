c({"name": "can.Control.route", "type": "page", "comment": "<p>The <code>can/control/route</code> plugin adds a {can.route] processor to can.Control.  This allows\ncreating routes and binding to <code>can.route</code> in a single step.  For example:</p>\n\n<pre><code>Router = can.Route({\n  // the route is empty\n  \"route\" : function(data){\n\n  },\n  // the route says todos\n  \"todos route\" : function(data){\n\n  },\n  // the route an id as data\n  \"todo/:id route\" : function(data){\n\n  }\n})\n</code></pre>\n\n<p>The following shows some example hashes, the function that is called, and the data:</p>\n\n<p><code>#!</code>: Will call the <code>route</code> control method with an empty data object</p>\n\n<p><code>#!todos</code>: Calls the <code>todos route</code> control method with an empty data object</p>\n\n<p><code>#!todos&amp;order=asc&amp;hidedone=true</code>: Calls the <code>todos route</code> control method with the data looking like\n<code>{ order : 'asc', hidedone : 'true' }</code></p>\n\n<p><code>#!todo/10</code>: Calls <code>todo/:id route</code> with data <code>{ id : 10 }</code></p>\n\n<p><code>#!todo/10&amp;done=true</code>: Calls <code>todo/:id route</code> with data <code>{ id : 10, done : 'true' }</code></p>", "parents": ["can.Control"], "src": "can/control/route/route.md", "children": []})