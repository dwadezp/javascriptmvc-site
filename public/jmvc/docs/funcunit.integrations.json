c({"name": "funcunit.integrations", "type": "page", "comment": "<p>FuncUnit integrates with third party browser automation and build tools.</p>\n\n<h2>Browser automation</h2>\n\n<p>To integrate FuncUnit tests with QA automation, FuncUnit tests can be launched by several methods.</p>\n\n<p>[funcunit.selenium Selenium] launches visual browsers. It runs selenium tests and reports results to the \ncommandline.</p>\n\n<pre><code class='javascript'>./js funcunit/run selenium path/to/funcunit.html</code></pre>\n\n<p>[funcunit.envjs Envjs] is a simulated browser environment that runs in Rhino. It does not support visual \nsimulation, like clicking or dragging, but can be used for basic unit testing.</p>\n\n<pre><code class='javascript'>./js funcunit/run envjs path/to/qunit.html</code></pre>\n\n<p>[funcunit.phantomjs PhantomJS] is a headless version of WebKit. It supports runnning full FuncUnit tests \nwithout actually launching a browser. It is faster than using Selenium to launch browsers.</p>\n\n<pre><code class='javascript'>./js funcunit/run phantomjs path/to/funcunit.html</code></pre>\n\n<h2>Build tools</h2>\n\n<p>Using browser automation tools, FuncUnit can be integrated into the project build.</p>\n\n<p>[funcunit.maven Maven] is a build tool used with Java projects. FuncUnit tests can be run \nas a maven build step. When tests fail, the build also fails.</p>\n\n<p>[funcunit.jenkins Jenkins] is a continuous integration tool, used to continuously run builds, tests, and \nreport on the health of the codebase. FuncUnit can be tied into Jenkins and made to fail the Jenkins build \nif FuncUnit tests aren't passing, which would alert developers of problems immediately. </p>\n\n<h2>Settings.js</h2>\n\n<p>Settings.js is a file used to configure options used by the automation tools. Here is an example of a \nsettings.js file.</p>\n\n<pre><code class='javascript'>FuncUnit = {\n    // the list of browsers that selenium runs tests on\n    browsers: [\"*firefox\"],\n\n    // the root for all paths in the tests, defaults to filesystem\n    jmvcRoot: null, // \"http://localhost:8000/\",\n\n    // the number of milliseconds between Selenium commands, \"slow\" is 500 ms\n    speed: null, //\"slow\"\n\n    // a script in funcunit/commandline/output that formats the output\n    output: 'xunit',\n\n    // the name of the file to save results to (only when using xunit formatter)\n    xmlLogFilename: 'testresults.xml',  \n\n    // a prefix for the xml log file classes\n    xmlLogClassPrefix: 'Qunit.'\n}</code></pre>\n\n<p>When you launch tests with an automation tool as shown above, FuncUnit first looks for a settings.js file \nin the same directory as the test page. If one is not found, it uses funcunit/settings.js as the default. </p>\n\n<p>For example, if your funcunit test is in <code>contacts/tests/funcunit.html</code> you'd put a settings.js \nfile in <code>contacts/tests/settings.js</code>.</p>\n\n<h2>Commandline output</h2>\n\n<p>When browser automation tools run, the events that QUnit publishes (testStart, testDone, etc) are captured and \nused for reporting. FuncUnit comes with two reporters. Each listens to the events and prints results to the \nconsole. You can also provide your own custom reporter.</p>\n\n<p>The reporter used is configured in settings.js.  The <code>output</code> property is a string that corresponds \nto the name of the JS file in the <code>funcunit/commandline/output</code> directory that should be used for \nreporting. This defaults to XUnit. </p>\n\n<h3>XUnit</h3>\n\n<p>[http://xunit.codeplex.com XUnit] is a unit testing framework for .NET, whose reporting format is now used in tools across different \nplatforms.  XUnit defines a [http://xunit.codeplex.com/wikipage?title=XmlFormat standard XML test output file format]. </p>\n\n<p>Tools like Jenkins can read this format.  By using the FuncUnit XUnit reporter, every time FuncUnit runs, a test \nfile called <code>testresults.xml</code> is written to the main directory of your project. </p>\n\n<p>Results are also printed to the console in an easy to read format.</p>\n\n<pre><code class='javascript'>MABOSBMOSCHE-M1:jmvc31 bmoschel$ ./js funcunit/run phantomjs cookbook/funcunit.html \nUsing Default Settings\nstarting steal.browser.phantomjs\n\nrecipe\n  recipes present\n    [x] There is at least one recipe\n  create recipes\n    [x] Typed Ice\n  edit recipes\n    [x] Typed Cold Tap Water\n  destroy\n    [x] Typed Ice Water\n    [x] \n\nTime: 11 seconds, Memory: 81.06 MB\n\nOK (4 tests, 5 assertions)</code></pre>\n\n<h3>Customizing output</h3>\n\n<p>You can easily provide your own custom reporting output and behavior.</p>\n\n<ol>\n<li>Create a file in the output directory like <code>funcunit/commandline/output/myreporter.js</code></li>\n<li>Change the output property in settings.js to \"myreporter\"</li>\n<li>In your reporter, add methods for all the FuncUnit events (<code<FuncUnit.<eventName></code>) \nand report accordingly.</li>\n</ol>\n\n<p>FuncUnit events (which mostly correspond to [http://docs.jquery.com/Qunit#API_documentation QUnit events]) \ninclude:</p>\n\n<ul>\n<li>browserStart - fired when Selenium starts a new browser</li>\n<li>browserDone - fired when Selenium finishes a browser</li>\n<li>testStart - a new test begins</li>\n<li>testDone - a test is done</li>\n<li>moduleStart - a module begins</li>\n<li>moduleDone - a module is done</li>\n<li>done - all tests are complete</li>\n<li>log - a console.log has been used</li>\n</ul>\n\n<pre><code class='javascript'>FuncUnit.done = function( failures, total ){\n  print(\"There were \" + failures + \" failed tests out of \" + total;\n})</code></pre>", "title": "Integrations", "parents": ["FuncUnit"], "order": 5, "src": "funcunit/pages/integrations.md", "children": ["funcunit.jenkins", "funcunit.maven", "funcunit.phantomjs", "funcunit.selenium"]})