C({"name": "jQuery.Observe", "type": "class", "comment": "<p>Observe provides observable behavior on \nJavaScript Objects and Arrays. </p>\n\n<h2>Use</h2>\n\n<p>Create a new Observe with the data you want to observe:</p>\n\n<pre><code>var data = { \n  addresses : [\n    {\n      city: 'Chicago',\n      state: 'IL'\n    },\n    {\n      city: 'Boston',\n      state : 'MA'\n    }\n    ],\n  name : \"Justin Meyer\"\n},\no = new $.Observe(data);\n</code></pre>\n\n<p><em>o</em> now represents an observable copy of <em>data</em>.  You\ncan read the property values of <em>o</em> with\n<code>observe.attr( name )</code> like:</p>\n\n<pre><code>// read name\no.attr('name') //-&gt; Justin Meyer\n</code></pre>\n\n<p>And set property names of <em>o</em> with \n<code>observe.attr( name, value )</code> like:</p>\n\n<pre><code>// update name\no.attr('name', \"Brian Moschel\") //-&gt; o\n</code></pre>\n\n<p>Observe handles nested data.  Nested Objects and\nArrays are converted to $.Observe and \n$.Observe.Lists.  This lets you read nested properties \nand use $.Observe methods on them.  The following \nupdates the second address (Boston) to 'New York':</p>\n\n<pre><code>o.attr('addresses.1').attrs({\n  city: 'New York',\n  state: 'NY'\n})\n</code></pre>\n\n<p>When a property value is changed, it creates events\nthat you can listen to.  There are two ways to listen\nfor events:</p>\n\n<ul>\n<li>[jQuery.Observe.prototype.bind bind] - listen for any type of change</li>\n<li>[jQuery.Observe.prototype.delegate delegate] - listen to a specific type of change</li>\n</ul>\n\n<p>With <code>bind( \"change\" , handler( ev, attr, how, newVal, oldVal ) )</code>, you can listen\nto any change that happens within the \nobserve. The handler gets called with the property name that was\nchanged, how it was changed ['add','remove','set'], the new value\nand the old value.</p>\n\n<pre><code>o.bind('change', function( ev, attr, how, nevVal, oldVal ) {\n\n})\n</code></pre>\n\n<p><code>delegate( attr, event, handler(ev, newVal, oldVal ) )</code> lets you listen\nto a specific even on a specific attribute. </p>\n\n<pre><code>// listen for name changes\no.delegate(\"name\",\"set\", function(){\n\n})\n</code></pre>\n\n<p><code>attrs()</code> can be used to get all properties back from the observe:</p>\n\n<pre><code>o.attrs() // -&gt; \n{ \n  addresses : [\n    {\n      city: 'Chicago',\n      state: 'IL'\n    },\n    {\n      city: 'New York',\n      state : 'MA'\n    }\n    ],\n  name : \"Brian Moschel\"\n}\n</code></pre>", "parents": ["jquerymx.lang"], "test": "jquery/lang/observe/qunit.html", "params": {"obj": {"order": 0, "description": "<p>a JavaScript Object that will be \nconverted to an observable</p>", "name": "obj", "type": "Object", "optional": false}}, "src": "../jquery/lang/observe/observe.js", "children": ["jQuery.Observe.prototype", "jQuery.Observe.List"]})