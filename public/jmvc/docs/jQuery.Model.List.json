C({"name": "jQuery.Model.List", "type": "class", "comment": "<p>Model.Lists are useful for managing multiple model instances.  They provide the ability to:</p>\n\n<ul>\n<li>Store and retrieve multiple instances</li>\n<li>Manage CRUD operations on multiple instances easily</li>\n<li>Listen for list updates such as Add/Update/Remove</li>\n<li>Add helpers and converters for multiple instances</li>\n<li>Fast HTML inserts</li>\n</ul>\n\n<p>Its easy to add a Model.List to any existing modeling instance.  After you have defined your\nmodel, simply define your Model.List like:</p>\n\n<pre><code>$.Model.List(\"MyModel.List\", { \n    //Static\n},{ \n    //Prototype \n});\n</code></pre>\n\n<h2>Store and retrieve multiple instances</h2>\n\n<p>Once you have a collection of models, you often want to retrieve and update \nthat list with new instances.  Storing and retrieving is a powerful feature\nyou can leverage to manage and maintain a list of models.</p>\n\n<p>To store a new model instance in a list...</p>\n\n<pre><code>listInstance.push(new Animal({ type: dog, id: 123 }))\n</code></pre>\n\n<p>To later retrieve that instance in your list...</p>\n\n<pre><code>var animal = listInstance.get(123);\n</code></pre>\n\n<h2>CRUD operations on multiple instances</h2>\n\n<p>It's pretty common to deal with updating or deleting multiple items at a time.</p>\n\n<p>For example, if we wanted to be able to destroy multiple contacts at once, we could \nadd a <code>destroy(ids, success, error )</code> method to a Contact model, which is \ncalled by a Contact.List:</p>\n\n<pre><code>$.Model(\"Contact\",{\n  destroy : '/contacts/destroy'\n},{})\n\n$.Model.List(\"Contact.List\");\n</code></pre>\n\n<p>The following demo illustrates this.  Check\nmultiple Contacts and click \"DESTROY ALL\"</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/list/list.html'></div>\n\n<h2>Managing List Updates</h2>\n\n<p>Model.List will publish events when instance(s) are added, updated, or removed. <br />\nListening to Model.List events allow you to listen easily manage updates of a \nitems in a specific list instance.  You can subscribe  to these events by binding to them directly...</p>\n\n<pre><code>myModelListInstance.bind('created', function(MyModelList, event, myModelList){\n    ...\n})\n</code></pre>\n\n<p>or subscribing in the controller using [jquery.controller.listening templated binding].</p>\n\n<pre><code>\"{myModelListInstancePassedViaOptions} created\":function(MyModelList, event, myModelList){ \n    ...\n}\n</code></pre>\n\n<h2>Helpers and Converters</h2>\n\n<p>List helpers provide the ability to add methods for multiple model instances.</p>\n\n<p>For example, if we wanted to add a helper method that would filter a collection\nwhich contained objects of type 'dogs' and 'cats' to just dogs.</p>\n\n<pre><code>$.Model.List('Animals.List', {}, {\n    dogs: function(){\n        return this.grep(function(entry){\n            return entry.type === \"dog\";\n        });\n    }\n});\n</code></pre>\n\n<h2>Faster Inserts</h2>\n\n<p>The 'easy' way to add a model to an element is simply inserting\nthe model into the view like:</p>\n\n<pre><code class='xml'>&lt;div &lt;%= task %>> A task &lt;/div></code></pre>\n\n<p>And then you can use [jQuery.fn.models $('.task').models()].</p>\n\n<p>This pattern is fast enough for 90% of all widgets.  But it\ndoes require an extra query.  Lists help you avoid this.</p>\n\n<p>The [jQuery.Model.List.prototype.get get] method takes elements and\nuses their className to return matched instances in the list.</p>\n\n<p>To use get, your elements need to have the instance's \nidentity in their className.  So to setup a div to reprsent\na task, you would have the following in a view:</p>\n\n<pre><code class='xml'>&lt;div class='task &lt;%= task.identity() %>'> A task &lt;/div></code></pre>\n\n<p>Then, with your model list, you could use get to get a list of\ntasks:</p>\n\n<pre><code class='javascript'>taskList.get($('.task'))</code></pre>\n\n<p>The following demonstrates how to use this technique:</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/list/list-insert.html'></div>", "parents": ["jQuery.Model"], "download": "http://jmvcsite.heroku.com/pluginify?plugins[]=jquery/model/list/list.js", "test": "jquery/model/list/qunit.html", "plugin": "jquery/model/list", "src": "../jquery/model/list/list.js", "children": ["jQuery.Model.List.static", "jQuery.Model.List.prototype", "jQuery.Model.List.Cookie", "jQuery.Model.List.Local"]})