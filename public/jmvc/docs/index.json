C({"name": "index", "type": "page", "comment": "<div class=\"top\">\n    <div class=\"topCorner\">\n        <div class=\"right\"></div>\n        <div class=\"left\"></div>\n    </div>\n    <div class=\"content\">\n        <h1>JavaScriptMVC Documentation</h1>\n    </div>\n    <div class=\"bottomCorner\">\n        <div class=\"right\"></div>\n        <div class=\"left\"></div>\n    </div>  \n</div>\n\n<p>Welcome to the happy path. This page demonstrates many of JavaScriptMVC's most important \nfeatures. If you are new to the framework, this page followed by \nthe [getstarted Getting Started Guide] is the best place to start.</p>\n\n<p>The [getstarted Getting Started Guide] walks you through \ncreating, testing, minifiying, and documenting an application. Or, if you're in crazy \nhurry, try the [rapidstart Rapid Start Guide].</p>\n\n<h2>How to Use the Docs</h2>\n\n<p>Click [#&amp;search=core Core] at the top for links to documentation on each core component.</p>\n\n<p>Use the search box at the top left to find the object, class, attribute, function, page or anything else you are looking for. </p>\n\n<p>After you've typed a search, click up/down/enter to navigate results in the sidebar.</p>\n\n<p>If you find a method you keep needing to reference, you can favorite it for quick access.  On the right of every page title there is a gray star icon. Click it to save that page as a favorite.  Your favorites are listed when you click \"Favorites\" on the top right navigation.</p>\n\n<h2>Overview</h2>\n\n<p>JavaScriptMVC is comprised of 4 independent projects:</p>\n\n<ul>\n<li>[jquerymx jQueryMX] - jQuery MVC and DOM extensions</li>\n<li>[stealjs StealJS] - JavaScript and CSS dependency management and build tools</li>\n<li>[FuncUnit] - Functional and Unit Testing framework.</li>\n<li>[DocumentJS] - Documentation Engine</li>\n</ul>\n\n<p>You can use them together or \nseparately (via the [http://javascriptmvc.com/builder.html download builder]). This\npage highlights what is in each project.  Click the the project links on the left for \na more in-depth overview of each project.</p>\n\n<h2>jQueryMX</h2>\n\n<p>[jquerymx jQueryMX] is a collection of mega-useful jQuery plugins. They provide \nfunctionality missing from jQuery necessary to implement and organize\nlarge-scale jQuery applications.</p>\n\n<h3>$.Class</h3>\n\n<p>[jQuery.Class $.Class] provides simple prototypal \ninheritance.  It's used by [jQuery.Controller $.Controller] and \n[jQuery.Model $.Model].</p>\n\n<pre><code>$.Class( NAME , STATIC_PROPS, PROTOTYPE_PROPS );\n</code></pre>\n\n<h3>$.Model</h3>\n\n<p>[jQuery.Model $.Model] encapsulates the service and data layer.  It helps you </p>\n\n<ul>\n<li>Create, retrieve, update, and delete data on the server.</li>\n<li>Convert service data to more useful JS data. EX: \"April 18, 2011\" to new Date(2011,3,18).</li>\n<li>Listen to changes in data</li>\n<li>Data validation</li>\n</ul>\n\n<h3>$.View</h3>\n\n<p>[jQuery.View $.View] is a client-side template framework. It \nsuper-powers client-side templating libraries, giving them</p>\n\n<ul>\n<li>Convenient and uniform syntax</li>\n<li>Template loading from html elements or external files</li>\n<li>Synchronous or asynchronous template loading</li>\n<li>Template preloading</li>\n<li>Caching of processed templates</li>\n<li>Bundling of processed templates in production builds</li>\n<li>$.Deferred support</li>\n</ul>\n\n<h3>$.Controller</h3>\n\n<p>[jQuery.Controller $.Controller] is a jQuery widget factory that specializes in preventing\nmemory leaks. </p>\n\n<p>The following creates a <code>$.fn.list</code> [jquery.controller.plugin plugin] that writes \na message into an element:</p>\n\n<pre><code>$.Controller( \"List\", {\n  init: function( ) {\n    this.element.text( this.options.message );\n  }\n});\n\n// create the list\n$('#list').list({message: \"Hello World\"});\n</code></pre>\n\n<h3>Special Events and Dom Extensions</h3>\n\n<p>JavaScriptMVC comes packed with jQuery [specialevents special events]\n(like [jQuery.Drag drag]-[jQuery.Drop drop]) and \nuseful [dom DOM extensions] (like [jQuery.fixture $.fixture]). Check them out!</p>\n\n<h2>StealJS</h2>\n\n<p>[stealjs StealJS] is a dependency management and build system.  To \nload scripts, first load <code>[steal steal/steal.js]</code> in your page and point \nit to the first JavaScript file you want to load like:</p>\n\n<pre><code>&lt;script type='text/javascript'\n        src='../../steal/steal.js?taskmanager/taskmanager.js'&gt;\n</code></pre>\n\n<p><b>Note:</b> The path to script.js should be given relative to \nJavaScriptMVC's [rootfolder root folder].</p>\n\n<h3>Loading other scripts</h3>\n\n<p>To load other scripts, css, and files, simply \n'steal' them relative to the current file. </p>\n\n<pre><code>steal('../list/list','models/task').css('taskmanager')\n</code></pre>\n\n<p>Typically, once all your dependencies are loaded, you'll want to do \nsomething with them.  Pass a function to \nsteal (aliased as <code>.[steal.static.then]</code>) to run\ncode once all prior dependencies have completed.  <code>taskmanager.js</code> \nmight look like:</p>\n\n<pre><code>steal('../list/list','models/task')\n      .css('taskmanager').then(function($){\n\n  $('#tasks').list({model: Task})      \n\n})\n</code></pre>\n\n<p>You could also write steal('../list/list') like:</p>\n\n<pre><code>steal('//list/list');\n</code></pre>\n\n<p>Script paths that start with '//' load relative to JMVC's root folder.</p>\n\n<p>Steal encourages you to organize your plugins and apps \nin a folder structure like:</p>\n\n<pre><code>plugin\\\n  plugin.js\n  plugin.html\n  plugin_test.js\n  plugin_test.html\n  views\\\n\napp\\\n  app.js\n  app.html\n  models\\\n  views\\\n  test\\\n  scripts\\\n</code></pre>\n\n<p>To make creating files and folders like this easy, Steal includes generators that create this structure:</p>\n\n<pre><code>windows   &gt; js jquery\\generate\\plugin plugin\nwindows   &gt; js jquery\\generate\\app app\n\nlinux/mac &gt; ./js jquery/generate/plugin plugin\nlinux/mac &gt; ./js jquery/generate/app app\n</code></pre>\n\n<p>To make loading files like this easy, steal.plugins loads files named in this way relative to JMVC's root:</p>\n\n<pre><code>steal.plugins(\n  'list',              // loads //list/list.js\n  'jquery/event/drag'  // loads //jquery/event/drag/drag.js\n  )\n</code></pre>\n\n<h3>Building scripts</h3>\n\n<p>If you used the application generator to create an application, to combine and minifiy your scripts into\na single production build, run:</p>\n\n<pre><code>windows   &gt; js app\\scripts\\build.js\nlinux/mac &gt; ./js app/scripts/build.js\n</code></pre>\n\n<h3>Using the production build</h3>\n\n<p>To load the production version of your app, change your page's script tag\nfrom <b>steal.js</b>, to steal.<b>production</b>.js like:</p>\n\n<pre><code>&lt;script type='text/javascript'\n        src='../../steal/steal.production.js?taskmanager/taskmanager.js'&gt;\n</code></pre>\n\n<h2>FuncUnit</h2>\n\n<p>[FuncUnit] provides automated unit and \nfunctional testing on top of [http://docs.jquery.com/QUnit QUnit].  Like every other project, \nit can be used independently or within JavaScriptMVC.  </p>\n\n<h3>Unit Tests</h3>\n\n<p>To write a Unit test, create a [http://docs.jquery.com/QUnit QUnit page] \n(ex <code>taskmanager/qunit.html</code>) that loads \nsteal and your test script like:</p>\n\n<pre><code>&lt;script type='text/javascript'\n        src='../../steal/steal.js?taskmanager/taskmanager/test/qunit.js'&gt;\n</code></pre>\n\n<p>Then steal FuncUnit's <code>qunit</code> plugin, any files you want to test, and write your test:</p>\n\n<pre><code>steal.plugins('funcunit/qunit')\n     .then('//taskmanager/models/task', function(){\n\n     module(\"Task Model\")\n\n     test('findAll', function(){\n\n       stop()\n       Task.findAll({}, function(tasks){\n         ok(tasks.length &gt; 0, \"We found at least 1 task\");\n         start();\n       });\n\n     });\n\n})\n</code></pre>\n\n<p>To run your tests, open the qunit.html page in your favorite browser or with Envjs's headless browser like:</p>\n\n<pre><code>windows   &gt; funcunit\\envjs taskmanager\\qunit.html\nlinux/mac &gt; ./funcunit/envjs taskmanager/qunit.html\n</code></pre>\n\n<h3>Functional Tests</h3>\n\n<p>To write a Functional test, the process is very similar.  Create a \n[http://docs.jquery.com/QUnit QUnit page] (ex <code>taskmanager/funcunit.html</code>) that \nloads a test script like:</p>\n\n<pre><code>&lt;script type='text/javascript'\n        src='../../steal/steal.js?taskmanager/taskmanager/test/funcunit.js'&gt;  \n</code></pre>\n\n<p>Then steal the <code>funcunit</code> plugin and write your test:</p>\n\n<pre><code>steal.plugins('funcunit')\n     .then(function(){\n\n     module(\"Task Manager\",{\n       setup : function(){\n         S.open('//taskmanager/taskmanager.html');\n\n         //wait for tasks to exist\n         S('li').exit()\n       }\n     })\n\n     test('creating a task', function(){\n\n        // enter a task name and submit the form\n        S('input[name=name]').type('Do the dishes\\n');\n\n        // make sure the new task is present\n        S('li:contains(Do the dishes)').exists(function(){\n          ok(true, \"created a task\")\n        });\n     })\n\n})\n</code></pre>\n\n<p>To run your funcunit test, open the funcunit.html page in your favorite browser or with Envjs's headless browser like:</p>\n\n<pre><code>windows   &gt; funcunit\\envjs taskmanager\\qunit.html\nlinux/mac &gt; ./funcunit/envjs taskmanager/qunit.html\n</code></pre>\n\n<h2>DocumentJS</h2>\n\n<p>[DocumentJS] provides powerful JavaScript \ndocumenting capabilities.  This whole website is built with it.  </p>\n\n<p>Document a 'class-like' object like:</p>\n\n<pre><code class='javascript'> /*\n  * @class Customer\n  * @parent crm \n  * @constructor\n  * Creates a new customer.\n  * @param {String} name\n  */\n  var Customer = function(name) {\n     this.name = name;\n  }</code></pre>\n\n<p>If you used the app generator to create an application, you can document your app like:</p>\n\n<pre><code>windows   &gt; js app\\scripts\\doc.js\nlinux/mac &gt; ./js app/scripts/doc.js\n</code></pre>\n\n<h2>Beyond the basics</h2>\n\n<p>After you've mastered the basics, here is some reading to continue your mastery:</p>\n\n<ul>\n<li>[learn Learn] - some FAQs about the bigger picture</li>\n<li>[http://jupiterjs.com/news/organizing-a-jquery-application Organizing a jQuery Application] - the architecture for assembling an app</li>\n<li>[http://jupiterjs.com/news/creating-a-javascriptmvc-slider Creating a JavaScriptMVC Slider] - how to create a widget</li>\n<li>[http://jupiterit.com/news/javascriptmvc-features JavaScriptMVC Features] - features list</li>\n<li>[http://jupiterjs.com/news/javascriptmvc-3-0-good-to-go JavaScriptMVC 3.0 Good to Go] - what's new in the 3.0 release</li>\n</ul>", "title": "JavaScriptMVC", "src": "../jmvc/pages/init.js", "children": ["FuncUnit", "jquerymx", "stealjs", "examples", "getstarted"]})