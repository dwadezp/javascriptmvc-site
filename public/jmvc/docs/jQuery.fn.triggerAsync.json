C({"name": "jQuery.fn.triggerAsync", "params": {"type": {"description": "<p>The type of event</p>", "type": "String", "optional": false, "order": 0, "name": "type"}, "data": {"description": "<p>The data for the event</p>", "type": "Object", "optional": false, "order": 1, "name": "data"}, "success(event)": {"order": 2, "description": "<p>a callback function</p>", "name": "success(event)", "type": "Function", "optional": false}, "prevented(event)": {"order": 3, "description": "<p>called if preventDefault is called on the </p>", "name": "prevented(event)", "type": "Function", "optional": false}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "comment": "<p>Triggers an event and calls success when the event has finished propagating through the DOM and\npreventDefault is not called.</p>\n\n<pre><code>$('#panel').triggerAsync('show', function(){\n  $('#panel').show();\n})\n</code></pre>\n\n<p>You can also provide a callback that gets called if preventDefault was called on the event:</p>\n\n<pre><code>$('#panel').triggerAsync('show', function(){\n  $('#panel').show();\n},function(){\n  $('#other').addClass('error');\n})\n</code></pre>\n\n<p>triggerAsync is designed to work with the [jquery.event.pause] plugin although it is defined in \n<code>jquery/event/default</code></p>", "plugin": "jquery/event/default", "parents": ["jquery.event.pause"], "src": "../jquery/event/default/default.js", "children": []})