c({"name": "can.Observe.setter", "type": "page", "comment": "<p><code>can.Observe.setter</code> extends the Observe object to provide convenient helper methods for \nsetting attributes on a observable.</p>\n\n<p>The <code>attr</code> function looks for a <code>setATTRNAME</code> function to handle setting the date property.</p>\n\n<p>By providing a function that takes the raw data and returns a form useful for JavaScript, \nwe can make our observes automatically convert data.</p>\n\n<pre><code>var Contact = can.Observe({\n    setBirthday : function(raw){\n        if(typeof raw == 'number'){\n            return new Date( raw )\n        }else if(raw instanceof Date){\n            return raw;\n        }\n    }\n});\n\n// set on init\nvar contact = new Contact({ birthday: 1332777411799 });\n\n// set via 'attr' method\ncontact.attr('birthday', new Date().getTime())\n\n// set via 'attr' method passing object\ncontact.attr({\n    'birthday': new Date().getTime()\n});\n</code></pre>\n\n<p>If the returned value is <code>undefined</code>, this means the setter is either in an async \nevent or the attribute(s) were not set.  If it was in fact in an async event, we \ndo not want to call the <code>update</code> property and therefore return <code>undefined</code> right away.</p>\n\n<h2>Error Handling</h2>\n\n<p>Setters can trigger errors if values passed didn't meet your defined validation(s).</p>\n\n<p>Below is an example of a <em>School</em> observable that accepts a name property and errors\nwhen no value or a empty string is passed.</p>\n\n<pre><code>var School = can.Observe({\n    setName : function(name, success, error){\n        if(!name){\n            error(\"no name\");\n        }\n        return error;\n    }\n});\n\nvar school = new School();\n\n// bind to error handler\nschool.bind(\"error\", function(ev, attr, error){\n    alert(\"no name\")\n})\n\n// set to empty string\nschool.attr(\"name\",\"\");\n</code></pre>", "parents": ["can.Observe"], "plugin": "can/observe/setter", "download": "http://donejs.com/can/dist/can.observe.setter.js", "test": "can/observe/setter/qunit.html", "src": "can/observe/setter/setter.md", "children": []})