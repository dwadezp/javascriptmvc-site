c({"name": "can.Observe", "type": "class", "comment": "<p>can.Observe provides the observable pattern for\nJavaScript Objects. It lets you</p>\n\n<ul>\n<li>Set and remove property or property values on objects</li>\n<li>Listen for changes in objects and arrays</li>\n<li>Work with nested properties</li>\n</ul>\n\n<h2>Creating an Observe</h2>\n\n<p>To create an observable object, use <code>new can.Observe( OBJECT )</code> like:</p>\n\n<pre><code>var person = new can.Observe({name: 'justin', age: 29})\n</code></pre>\n\n<p>To create an observable array, use <code>new can.Observe.List( ARRAY )</code> like:</p>\n\n<pre><code>var hobbies = new can.Observe.List(['programming', \n                               'basketball', \n                               'nose picking'])\n</code></pre>\n\n<p>can.Observe and [can.Observe.List] are very similar. In fact,\ncan.Observe.List inherits can.Observe and only adds a few extra methods for\nmanipulating arrays like [can.Observe.List::push push].  Go to\n[can.Observe.List] for more information about lists.</p>\n\n<p><code>Observe</code> works with nested objects and arrays, so the following works:</p>\n\n<pre><code>var data = { \n  addresses : [\n    {\n      city: 'Chicago',\n      state: 'IL'\n    },\n    {\n      city: 'Boston',\n      state : 'MA'\n    }\n    ],\n  name : \"Justin Meyer\"\n},\no = new can.Observe(data);\n</code></pre>\n\n<p><em>o</em> now represents an observable copy of <em>data</em>.  </p>\n\n<p>Observe is inherited by [can.Model].</p>\n\n<h2>Getting and Setting Properties</h2>\n\n<p>Use [can.Observe::attr attr] to get and set properties.</p>\n\n<p>For example, you can <strong>read</strong> the property values of <em>o</em> with\n<code>observe.attr( name )</code> like:</p>\n\n<pre><code>// read name\no.attr('name') //-&gt; Justin Meyer\n</code></pre>\n\n<p>And <strong>set</strong> property names of <em>o</em> with \n<code>observe.attr( name, value )</code> like:</p>\n\n<pre><code>// update name\no.attr('name', \"Brian Moschel\") //-&gt; o\n</code></pre>\n\n<p>Observe handles nested data.  Nested Objects and\nArrays are converted to can.Observe and \ncan.Observe.Lists.  This lets you read nested properties \nand use can.Observe methods on them.  The following \nupdates the second address (Boston) to 'New York':</p>\n\n<pre><code>o.attr('addresses.1').attr({\n  city: 'New York',\n  state: 'NY'\n})\n</code></pre>\n\n<p><code>attr()</code> can be used to get all properties back from the observe:</p>\n\n<pre><code>o.attr() // -&gt; \n{ \n  addresses : [\n    {\n      city: 'Chicago',\n      state: 'IL'\n    },\n    {\n      city: 'New York',\n      state : 'MA'\n    }\n  ],\n  name : \"Brian Moschel\"\n}\n</code></pre>\n\n<h2>Listening to property changes</h2>\n\n<p>When a property value is changed, it creates events\nthat you can listen to.  There are two ways to listen\nfor events:</p>\n\n<ul>\n<li>[can.Observe::bind bind] - listen for any type of change</li>\n<li>[can.Observe::delegate delegate] - listen to a specific type of changes</li>\n</ul>\n\n<p>With <code>bind( \"change\" , handler( ev, attr, how, newVal, oldVal ) )</code>, you can listen\nto any change that happens within the \nobserve. The handler gets called with the property name that was\nchanged, how it was changed ['add','remove','set'], the new value\nand the old value.</p>\n\n<pre><code>o.bind('change', function( ev, attr, how, nevVal, oldVal ) {\n\n})\n</code></pre>\n\n<p><code>delegate( attr, event, handler(ev, newVal, oldVal ) )</code> lets you listen\nto a specific event on a specific attribute. </p>\n\n<pre><code>// listen for name changes\no.delegate(\"name\",\"set\", function(){\n\n})\n</code></pre>\n\n<p>Delegate lets you specify multiple attributes and values to match \nfor the callback. For example,</p>\n\n<pre><code>r = $.O({type: \"video\", id : 5})\nr.delegate(\"type=images id\",\"set\", function(){})\n</code></pre>", "parents": ["index"], "test": "can/observe/qunit.html", "construct": "", "ret": {"type": "can.observe", "description": ""}, "params": {"obj": {"order": 0, "description": "<p>a JavaScript Object that will be \nconverted to an observable</p>", "name": "obj", "type": "Object", "optional": false}}, "src": "can/observe/observe.md", "children": ["can.Observe.setter", "can.Observe.sort", "can.Observe.validations"]})