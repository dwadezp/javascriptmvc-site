c({"name": "Partials", "type": "page", "comment": "<h1>Partials</h1>\n\n<p>Partials are templates embedded in other templates which execute at runtime. <br />\nPartials begin with a greater than sign, like <code>{{&gt;my_partial}}</code>.  </p>\n\n<p>Partials are rendered at runtime, so recursive partials are possible but make sure you avoid infinite loops. They also inherit the calling context.</p>\n\n<p>For example, this template and partial:</p>\n\n<p><strong>base.mustache</strong></p>\n\n<pre><code>&lt;h2&gt;Names&lt;/h2&gt;\n{{#names}}\n    {{&gt;user.mustache}}\n{{/names}}\n</code></pre>\n\n<p><strong>user.mustache</strong></p>\n\n<pre><code>&lt;strong&gt;{{name}}&lt;/strong&gt;\n</code></pre>\n\n<p>The resulting expanded template at render time would look like:</p>\n\n<pre><code>&lt;h2&gt;Names&lt;/h2&gt;\n{{#names}}\n    &lt;strong&gt;{{name}}&lt;/strong&gt;\n{{/names}}\n</code></pre>\n\n<h2>Acquiring Partials</h2>\n\n<p>You can manually register partial templates by calling\n<code>can.view.registerView</code> and passing an identifier and content.  For example:</p>\n\n<pre><code>can.view.registerView('myTemplate', \"My body lies over {{.}}\")\n</code></pre>\n\n<p>then later in the view:</p>\n\n<pre><code>{{&gt;myTemplate}}\n</code></pre>\n\n<p>resulting in the template rendering with the current context applied to the partial.</p>\n\n<p>Additionally, you can register partials that exist in script tags on the page.  For example:</p>\n\n<pre><code>&lt;script id=\"mytemplate\" type=\"text/mustache\"&gt;\n    {{&gt;mypartial}}\n&lt;/script&gt;\n\n&lt;script id=\"mypartial\" type=\"text/mustache\"&gt;\n</code></pre>\n\n<p>       I am a partial.\n    </script></p>\n\n<pre><code>var template = can.view(\"#mytemplate\", {});\n</code></pre>\n\n<p>You can also reference a file as a partial.  For example:</p>\n\n<pre><code>&lt;script id=\"template\" type=\"text/mustache\"&gt;\n</code></pre>\n\n<p>       {{>views/test_template.mustache}}\n    </script></p>\n\n<pre><code>var template = can.view(\"#mytemplate\", {});\n</code></pre>", "parents": ["can.Mustache"], "order": 2, "src": "can/view/mustache/doc/partials.md", "children": []})